# THIS IS AN AUTO-GENERATE FILE. 
# DO NOT EDIT MANUALLY.
# Please run development/capabilitiesJsonToPython/capabilitiesToPy.sh to generate this file.
# Copy this file and remove this header to create a new CodeToCAD Provider Test.

from typing import Optional
import unittest

from CodeToCAD import *
import CodeToCAD.CodeToCADInterface as CodeToCADInterface
import CodeToCAD.utilities as Utilities
from CodeToCAD.utilities import (Angle, BoundaryBox, CurveTypes, Dimension,
                            Dimensions, Point, center, createUUIDLikeId,
                            getAbsoluteFilepath, getFilename, max, min)

class TestProviderCase(unittest.TestCase):

    def setUp(self) -> None:
        # inject provider?
        super().setUp()

{% for className, methods in capabilities.items() -%}

class Test{{className}}(TestProviderCase):    
    {%- from 'capabilitiesToPyUtilities.j2' import typeMapping -%}

    {%- set className = "Part" if className == "Entity" else className -%}

    {%-set classConstructor = methods["constructor"] if "constructor" in methods else {}-%}
    {%-set classConstructorParameters = classConstructor["parameters"] if "parameters" in classConstructor else {}-%}

    {%-for methodName, properties in methods.items() -%} {# e.g. "parameters": {"name": {"type": "string"}} #}

    {%- set isStaticMethod = "staticMethod" in properties and properties["staticMethod"] -%}

    {%- set parameters = properties["parameters"] if "parameters" in properties else {} -%}

    {%- if methodName == "information" %}
    {# Do nothing #}
    {%- elif methodName == "extends"-%}
    {# Do nothing #}
    {%- elif methodName == "alias"-%}
    {# Do nothing #}
    {%- elif methodName == "constructor"%}
    {# Do nothing #}
    {%- elif methodName == "default"%}
    {# Do nothing #}
    {%- else %}
    @unittest.skip
    def test_{{methodName}}(self):
        instance = {{className}}("{{ classConstructorParameters.keys()|join('","') }}")

        value = instance.{{methodName}}("{{ properties["parameters"].keys()|join('","') if "parameters" in properties}}")

        {% if properties["action"] == "get" %}
        assert value, "Get method failed."
        {%elif properties["action"] == "create"%}
        assert value.isExists(), "Create method failed."
        {%elif properties["action"] == "modify"%}
        assert value, "Modify method failed."
        {%endif%}
        
    
    {%-endif-%}
    {%-endfor%}
{% endfor -%}
