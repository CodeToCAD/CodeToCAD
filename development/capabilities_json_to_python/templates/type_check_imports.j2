{%-set methodReturnTypes = []-%}
{%- from 'capabilities_to_py_utilities.j2' import type_mapping, ignore_method_names -%}
{%-for method_name, properties in methods.items()-%}
    {%-if method_name not in ignore_method_names -%}

        {%-if "returnType" in properties -%}
            {%-set returnType = type_mapping(properties["returnType"]) -%}
            {%-for codeToCADClassName in all_codetocad_class_names-%}
                {%-if codeToCADClassName in returnType and not codeToCADClassName == className and not codeToCADClassName + classNameSuffix in implementedClassesWithSuffixes -%}
                    {%-set methodReturnTypes = methodReturnTypes.append(codeToCADClassName)-%}
                {%-endif-%}
            {%-endfor-%}
            {%-for codeToCADClassName in all_codetocad_class_names-%}
                {%-if codeToCADClassName in returnType and not codeToCADClassName == className and not codeToCADClassName + classNameSuffix in extendedClassesWithSuffixes -%}
                    {%-set methodReturnTypes = methodReturnTypes.append(codeToCADClassName)-%}
                {%-endif-%}
            {%-endfor-%}
        {%-endif-%}

        {%- set parameters = properties["parameters"] if "parameters" in properties else {} -%}
        {%-for parameter, definition in parameters.items() -%}
            {%-for codeToCADClassName in all_codetocad_class_names-%}
                {%-if codeToCADClassName in definition.type and not codeToCADClassName == className and not codeToCADClassName + classNameSuffix in implementedClassesWithSuffixes -%}
                    {%-set methodReturnTypes = methodReturnTypes.append(codeToCADClassName)-%}
                {%-endif-%}
            {%-endfor-%}
            {%-for codeToCADClassName in all_codetocad_class_names-%}
                {%-if codeToCADClassName in definition.type and not codeToCADClassName == className and not codeToCADClassName + classNameSuffix in extendedClassesWithSuffixes -%}
                    {%-set methodReturnTypes = methodReturnTypes.append(codeToCADClassName)-%}
                {%-endif-%}
            {%-endfor-%}
        {%-endfor-%}

    {%-endif-%}
{%-endfor-%}

{%-set methodReturnTypes = methodReturnTypes|unique|list-%}
{%-if methodReturnTypes|length > 0-%}
from typing import TYPE_CHECKING
if TYPE_CHECKING:
{%-for method in methodReturnTypes%}
    from . import {{method+classNameSuffix}}
{%-endfor-%}
{%-endif-%}