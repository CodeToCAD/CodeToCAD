# THIS IS AN AUTO-GENERATE FILE. 
# DO NOT EDIT MANUALLY.
# Please run development/capabilities_json_to_python/capabilities_to_py.sh to generate this file.
# Copy this file and remove this header to create a new CodeToCAD Provider.

{%set interface_name = class_name + "Interface" %}
{% set imports = capabilities_loader.generate_imports(class_name, [class_name]) %}

from codetocad.interfaces.{{class_name|lower}}_interface import {{interface_name}}

from codetocad.providers import get_provider

{% for capabilities_class in imports.get_implementable_class_names("Interface") %}
{{ imports.format_import_statement(capabilities_class, "codetocad.interfaces.") }}
{% endfor %}

{% set parameters = capabilities_loader.get_constructor_parameters_for_class(class_name)%}

{%- from 'generate_method_definition.j2' import generate_parameters -%}

def create_{{class_name|lower}}(
    {%for parameter in parameters -%} 
    {{generate_parameters(capabilities_loader, capabilities_method, parameter)}}
    {{-", " if not loop.last}} 
    {%-endfor%}) -> {{interface_name}}:
    '''
    {{capabilities_loader.capabilities[class_name].information }}

    NOTE: This is a factory - calling this returns an instance of a registered provider.
    Register a provider using the `register()` method.
    '''
    return get_provider({{interface_name}})(
    {%for parameter in parameters -%} 
    {{parameter.name}}
    {{-", " if not loop.last}} 
    {%-endfor%}) # type: ignore

{%- from 'generate_method_definition.j2' import generate_parameters -%}
{%for capabilities_method in capabilities_loader.capabilities[class_name].static_methods %}
def {{capabilities_method.name}}_{{class_name|lower}}(
        {%for parameter in capabilities_method.parameters -%} 
        {{generate_parameters(capabilities_loader, capabilities_method, parameter)}}
        {{-", " if not loop.last}} 
        {%-endfor%}
    )
    {{-  " -> " + capabilities_loader.append_interface_suffix(capabilities_method.return_type_parsed) if capabilities_method.return_type_parsed}}:
        return get_provider({{interface_name}}).{{capabilities_method.name}}(
        {%for parameter in capabilities_method.parameters -%} 
        {{parameter.name}}
        {{-", " if not loop.last}} 
        {%-endfor%})
{%endfor%}