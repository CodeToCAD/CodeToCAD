{%- from 'generate_init_constructor.j2' import generate_init_constructor -%}
{%- from 'capabilities_to_py_utilities.j2' import type_mapping, type_mapping_with_class_name_suffix, generate_method_arguments -%}

{%-set known_method_names_to_skip = ["information", "extends","constructor", "default", "is_interface_only"]-%}

{%- macro generate_test_method(method_name, properties, methods, use_abstract_method_decorator, generate_interface_only_capabilities_in_a_separate_file, className, classNameSuffix, all_implementable_codetocad_class_names, all_interface_only_codetocad_class_names, all_classes) -%}

    {%- if method_name in known_method_names_to_skip %}
    {# Do nothing #}
    {%- elif method_name == "implements"-%}
    
        {%if generate_interface_only_capabilities_in_a_separate_file == false %}

                {%-for implementedClass in properties.split(",") -%}
                
                    {%- set implementedClassMethods = all_classes[implementedClass]-%}

                    {%-for method_name, implementedClassProperties in implementedClassMethods.items() -%}

    {{generate_test_method(method_name, implementedClassProperties, implementedClassMethods, use_abstract_method_decorator, generate_interface_only_capabilities_in_a_separate_file, className, classNameSuffix, all_implementable_codetocad_class_names, all_interface_only_codetocad_class_names, all_classes)}}
                        
                    {%-endfor-%}

                {%-endfor-%}

        {%-endif%}

    {%- else %}
    
    {%- set parameters = properties["parameters"] if "parameters" in properties else {} %}

    {{"@skip('TODO')\n    " if not use_abstract_method_decorator -}}
    {{"@abstractmethod\n    " if use_abstract_method_decorator -}}
    def test_{{method_name}}(self):
        {% if use_abstract_method_decorator %}
        pass
        {%else%}
        instance = {{className}}()

        value = instance.{{method_name}}("{{ parameters.keys()|join('","')}}")

        {% if properties["action"] == "get" %}
        assert value, "Get method failed."
        {%elif properties["action"] == "create"%}
        assert value.is_exists(), "Create method failed."
        {%elif properties["action"] == "modify"%}
        assert value, "Modify method failed."
        {%endif%}
        {%endif%}

    {%-endif%}

{%- endmacro %}