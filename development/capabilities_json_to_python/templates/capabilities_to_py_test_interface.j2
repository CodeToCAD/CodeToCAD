# THIS IS AN AUTO-GENERATE FILE. 
# DO NOT EDIT MANUALLY.
# Please run development/capabilities_json_to_python/capabilities_to_py.sh to generate this file.

# testsSample will implement these interfaces - this ensures that as capabilities.json is updated, tests are up to date as well.

from abc import ABCMeta, abstractmethod

from codetocad import {{className}}

{%-set implementedClassesWithSuffixes = []-%}
{%- if "implements" in methods-%}
{%-set implementedClasses = methods["implements"]-%}
{%-for implementedClass in implementedClasses.split(",") -%}
{%-set implementedClassWithSuffix = implementedClass + "TestInterface"-%}
{%- set implementedClassesWithSuffixes = implementedClassesWithSuffixes.append(implementedClassWithSuffix)-%}
{%-endfor-%}
{%-endif%}

{% if implementedClassesWithSuffixes|length > 0%}
from codetocad.tests_interfaces import ({{implementedClassesWithSuffixes|join(", ")}})
{%-endif%} 

{%set use_abstract_method_decorator = True%}

class {{className}}TestInterface({{implementedClassesWithSuffixes|join(",") + (", " if implementedClassesWithSuffixes|length > 0 else "")}}metaclass=ABCMeta):    
    {%- from 'generate_test_method.j2' import generate_test_method -%}
    {%- from 'capabilities_to_py_utilities.j2' import type_mapping -%}

    {%-for method_name, properties in methods.items() -%} {# e.g. "parameters": {"name": {"type": "string"}} #}

    {{- generate_test_method(method_name, properties, methods,use_abstract_method_decorator, generate_interface_only_capabilities_in_a_separate_file, className, classNameSuffix, all_codetocad_class_names, all_classes)}}


    {%-endfor%}
