
{%- set types = {"string":"str", "array": "list", "object": "dict", "any": "object", "number":"int", "float":"float", "boolean":"bool", "string,float":"FloatOrItsStringValue","int,float":"IntOrFloat", "string,Part":"PartOrItsName", "string,Entity":"EntityOrItsName","string,Sketch":"SketchOrItsName", "list[string,Entity]":"list[EntityOrItsName]", "string,Landmark":"LandmarkOrItsName","list[string,Landmark]":"list[LandmarkOrItsName]", "string,Material":"MaterialOrItsName", "string,int,Axis":"AxisOrItsIndexOrItsName", "string,float,Dimension":"DimensionOrItsFloatOrStringValue","string,float,Angle":"AngleOrItsFloatOrStringValue", "string,Entity": "EntityOrItsName", "string,list[string],Point": "PointOrListOfFloatOrItsStringValue", "list[string,list[string],Point]": "list[PointOrListOfFloatOrItsStringValue]", "string,list[string],Point,Vertex": "PointOrListOfFloatOrItsStringValueOrVertex", "list[string,list[string],Point,Vertex]": "list[PointOrListOfFloatOrItsStringValueOrVertex]", "string,LengthUnit": "LengthUnitOrItsName", "string,PresetLandmark": "PresetLandmarkOrItsName","string,Camera": "CameraOrItsName","string,Exportable": "ExportableOrItsName" } -%}

{%- set mock_values_by_type = {'str': "'String'", 'list': [], 'dict': {}, 'object': "'instance'", 'int': 0, 'float': 0.0, 'bool': True, 'FloatOrItsStringValue': 0.0, 'IntOrFloat': 0, 'Part': "Part('a part')", 'PartOrItsName': "Part('a part')", 'Entity': "Entity('an entity')", 'EntityOrItsName': "Entity('an entity')", "Sketch": "Sketch('a sketch')", 'SketchOrItsName': "Sketch('a sketch')", 'list[EntityOrItsName]': ["Entity('an entity')"], 'Landmark':"Landmark('name', 'parent')", 'LandmarkOrItsName': "Landmark('name', 'parent')", 'list[LandmarkOrItsName]': ["Landmark('name', 'parent')"], "Material": "Material('mat')", 'MaterialOrItsName': "Material('mat')", "Axis": "Axis.x", 'AxisOrItsIndexOrItsName': "x", "Dimension": "Dimension(0,'mm')", 'DimensionOrItsFloatOrStringValue': "Dimension(0,'mm')", "Angle": "Angle('90')",'AngleOrItsFloatOrStringValue': "Angle('90')", "Point":"Point.from_list_of_float_or_string([0,0,0])", 'PointOrListOfFloatOrItsStringValue': "Point.from_list_of_float_or_string([0,0,0])", 'list[PointOrListOfFloatOrItsStringValue]': ["Point.from_list_of_float_or_string([0,0,0])"], 'PointOrListOfFloatOrItsStringValueOrVertex': "Point.from_list_of_float_or_string([0,0,0])", 'list[PointOrListOfFloatOrItsStringValueOrVertex]': ["Point.from_list_of_float_or_string([0,0,0])"], 'LengthUnitOrItsName': "mm", "PresetLandmark": "PresetLandmark.topLeft", 'PresetLandmarkOrItsName': "PresetLandmark.topLeft", "Camera":"Camera()", 'CameraOrItsName': "Camera()", 'ExportableOrItsName': "Part('an exportable part')", 'Exportable': "Part('an exportable part')", "Projectable":"Sketch('a projected sketch')", "BoundaryBox": "BoundaryBox(BoundaryAxis(0,0),BoundaryAxis(0,0),BoundaryAxis(0,0))", "Dimensions":"Dimensions.from_point(Point.from_list_of_float_or_string([0,0,0]))"}%}

{%- set ignore_method_names = ["information", "is_interface_only", "extends", "implements"] -%}

{% macro type_mapping(typeName) -%}
    {{types[typeName] if typeName in types else typeName}}
{%- endmacro %}
{% macro type_mapping_with_quotes(typeName) -%}
    {{types[typeName] if typeName in types else "'"+typeName+"'"}}
{%- endmacro %}

{% macro type_mapping_with_class_name_suffix(typeName, classNameSuffix, all_codetocad_class_names) -%}
    {%-set returnType = {"value":type_mapping_with_quotes(typeName)}-%}
    {%-if typeName not in types-%}
        {%-for codeToCADClassName in all_codetocad_class_names-%}
            {%-if codeToCADClassName in returnType["value"] -%}
                {%-set _ = returnType.update({"value": returnType["value"]|replace(codeToCADClassName, codeToCADClassName + classNameSuffix)})-%}
            {%-endif-%}
        {%-endfor-%}
    {%-endif-%}
    {{returnType["value"]}}
{%- endmacro %}

{%macro generate_method_arguments(method_name, parameters, isStaticMethod, use_abstract_method_decorator, classNameSuffix, all_codetocad_class_names) -%}
    {{"@abstractmethod\n    " if use_abstract_method_decorator and not isStaticMethod-}}
    {{"@staticmethod\n    " if isStaticMethod-}}
    def {{method_name}}({{"self" if not isStaticMethod}}{%- if parameters.keys()|length > 0 -%}
    {{"," if not isStaticMethod}} {%for parameter, definition in parameters.items() -%} {# e.g. {"name":{"type": "string"}} #}
        {%-set defaultValue = definition.defaultValue if "defaultValue" in definition else None-%}
        {%-set defaultValue = '"'+defaultValue+'"' if defaultValue is string else defaultValue|string -%}
        {{ parameter }} {{-": " + ("Optional["+type_mapping_with_class_name_suffix(definition.type, classNameSuffix, all_codetocad_class_names)+"]" if definition.required == False else type_mapping_with_class_name_suffix(definition.type, classNameSuffix, all_codetocad_class_names)) if definition.type and definition.type != "any" }} {{- (" = "+defaultValue if "defaultValue" in definition  else " = None") if definition.required == False or "defaultValue" in definition -}} {{-", " if not loop.last}} 
    {%-endfor%}
{%-endif%}
{%- endmacro %}