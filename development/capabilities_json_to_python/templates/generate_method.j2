{%- from 'generate_init_constructor.j2' import generate_init_constructor -%}
{%- from 'capabilities_to_py_utilities.j2' import type_mapping, type_mapping_with_class_name_suffix, generate_method_arguments -%}

{%-set known_method_names_to_skip = ["information", "extends", "is_interface_only"]-%}

{%- macro generate_method(method_name, properties, methods, use_abstract_method_decorator, generate_interface_only_capabilities_in_a_separate_file, className, classNameSuffix, all_codetocad_class_names, all_classes) -%}

    {%- if method_name in known_method_names_to_skip %}
    {# Do nothing #}
    {%- elif method_name == "implements"-%}
        
            {%if generate_interface_only_capabilities_in_a_separate_file == false %}

                    {%-for implementedClass in properties.split(",") -%}
                    
                        {%- set implementedClassMethods = all_classes[implementedClass]-%}

                        {%-for method_name, implementedClassProperties in implementedClassMethods.items() -%}

    {{generate_method(method_name, implementedClassProperties, implementedClassMethods, use_abstract_method_decorator, generate_interface_only_capabilities_in_a_separate_file, className, classNameSuffix, all_codetocad_class_names, all_classes)}}
                        

                        {%-endfor-%}

                    {%-endfor-%}

            {%-endif-%}
    {%-else-%}

        {%- set isStaticMethod = "staticMethod" in properties and properties["staticMethod"] -%}

        {%- set parameters = properties["parameters"] if "parameters" in properties else {} -%}
        
        {%- if method_name == "constructor"%}

        {{generate_init_constructor(parameters, use_abstract_method_decorator, classNameSuffix, all_codetocad_class_names, methods, all_classes)}}

        {%- elif method_name == "default"%}

    {{ generate_method_arguments(method_name, parameters, isStaticMethod, use_abstract_method_decorator, classNameSuffix, all_codetocad_class_names) }}) {{-  " -> " + type_mapping_with_class_name_suffix(properties["returnType"], classNameSuffix, all_codetocad_class_names) if "returnType" in properties}}:
        {%if use_abstract_method_decorator-%}
        raise RuntimeError()
        {%else-%}
        return {{className}}()
        {%-endif-%}

        {%- else %}

    {{ generate_method_arguments(method_name, parameters, isStaticMethod, use_abstract_method_decorator, classNameSuffix, all_codetocad_class_names) }}) {{-  " -> " + type_mapping_with_class_name_suffix(properties["returnType"], classNameSuffix, all_codetocad_class_names) if "returnType" in properties}}:
        {% if "information" in properties and use_abstract_method_decorator -%}
        '''
        {{ properties["information"] }}
        '''
        {%endif%}
        {% if use_abstract_method_decorator -%}
        print("{{method_name}} is called in an abstract method. Please override this method.")
        {{ "return self" if "action" in properties and properties["action"] != "get" else "raise NotImplementedError()" }}
        {%else-%}
        {{ "return self" if "action" in properties and properties["action"] != "get" else "raise NotImplementedError()" }}
        {%endif%}
        
        {%-endif-%}
    {%-endif%}

{%- endmacro %}