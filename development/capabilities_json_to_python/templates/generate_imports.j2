{%- from 'capabilities_to_py_utilities.j2' import type_mapping, type_mapping_with_class_name_suffix, generate_method_arguments, mock_values_by_type,  ignore_method_names_for_generate, ignore_method_names -%}

{%- macro generate_imports(methods, use_abstract_method_decorator, generate_interface_only_capabilities_in_a_separate_file, className, classNameSuffix, implementedClassesWithSuffixes,extendedClassesWithSuffixes, all_implementable_codetocad_class_names, all_interface_only_codetocad_class_names, all_classes, methodsToSkip) -%}
{%-set methodReturnTypes = []-%}

{%-for method_name, properties in methods.items()-%}
    {%- if method_name in ignore_method_names %}
    {# Do nothing #}
    {%-else-%}
        {%-if "return_type" in properties -%}
            {%-set returnType = type_mapping(properties["return_type"]) -%}
            {# ReturnType for implemented classes: #}
            {%-for codetocad_class_name in all_implementable_codetocad_class_names-%}
                {%-if codetocad_class_name in returnType and not codetocad_class_name == className and not (codetocad_class_name + classNameSuffix in implementedClassesWithSuffixes or codetocad_class_name + classNameSuffix in extendedClassesWithSuffixes) and codetocad_class_name not in methodsToSkip -%}
                    {%-set methodReturnTypes = methodReturnTypes.append(codetocad_class_name)-%}
                {%-endif-%}
            {%-endfor-%}

            {%-for codetocad_class_name in all_interface_only_codetocad_class_names-%}
                {%-if codetocad_class_name in returnType and not codetocad_class_name == className and not (codetocad_class_name + classNameSuffix in implementedClassesWithSuffixes or codetocad_class_name + classNameSuffix in extendedClassesWithSuffixes) and codetocad_class_name not in methodsToSkip -%}
                    {%-set methodReturnTypes = methodReturnTypes.append(codetocad_class_name)-%}
                {%-endif-%}
            {%-endfor-%}
        {%-endif-%}

        {%- set parameters = properties["parameters"] if "parameters" in properties else {} -%}
        {%-for parameter, definition in parameters.items() -%}
            {# Parameters for implemented classes: #}
            {%-for codetocad_class_name in all_implementable_codetocad_class_names-%}
                {%-if codetocad_class_name in definition.type and not codetocad_class_name == className and not (codetocad_class_name + classNameSuffix in implementedClassesWithSuffixes or codetocad_class_name + classNameSuffix in extendedClassesWithSuffixes) and codetocad_class_name not in methodsToSkip -%}
                    {%-set methodReturnTypes = methodReturnTypes.append(codetocad_class_name)-%}
                {%-endif-%}
            {%-endfor-%}


            {%-for codetocad_class_name in all_interface_only_codetocad_class_names-%}
                {%-if codetocad_class_name in definition.type and not codetocad_class_name == className and not (codetocad_class_name + classNameSuffix in implementedClassesWithSuffixes or codetocad_class_name + classNameSuffix in extendedClassesWithSuffixes) and codetocad_class_name not in methodsToSkip -%}
                    {%-set methodReturnTypes = methodReturnTypes.append(codetocad_class_name + "Interface")-%}
                {%-endif-%}
            {%-endfor-%}
        {%-endfor-%}

    {%-endif-%}
{%-endfor-%}

{%-if generate_interface_only_capabilities_in_a_separate_file == false and "implements" in methods -%}

        {%-for implementedClass in methods["implements"].split(",") -%}
        
            {%- set implementedClassMethods = all_classes[implementedClass]-%}

{{generate_imports( implementedClassMethods, use_abstract_method_decorator, generate_interface_only_capabilities_in_a_separate_file, implementedClass, classNameSuffix, all_implementable_codetocad_class_names, all_interface_only_codetocad_class_names, all_classes, methodReturnTypes)}}

        {%-endfor-%}

{%-endif-%}

{%-set methodReturnTypes = methodReturnTypes|unique|list-%}
{%-if methodReturnTypes|length > 0%}

{{"# imports for " + className}}
{%for method in methodReturnTypes%}
from . import {{method+classNameSuffix}}
{%-endfor-%}
{%-endif-%}


{%- endmacro %}