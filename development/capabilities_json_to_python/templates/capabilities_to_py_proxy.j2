# THIS IS AN AUTO-GENERATE FILE. 
# DO NOT EDIT MANUALLY.
# Please run development/capabilities_json_to_python/capabilities_to_py.sh to generate this file.
# Copy this file and remove this header to create a new CodeToCAD Provider.

{% include 'common_imports.j2' %}

{%set interface_name = class_name + "Interface" %}
{% set imports = capabilities_loader.generate_imports(class_name, [class_name]) %}

from codetocad.providers import get_provider

from codetocad.interfaces.{{class_name|lower}}_interface import {{interface_name}}

{% for capabilities_class in imports.get_implementable_class_names("Interface") + imports.get_interface_class_names("Interface")+ capabilities_loader.capabilities[class_name].get_extends_class_names("Interface")  %}
{{ imports.format_import_statement(capabilities_class, "codetocad.interfaces.") }}
{% endfor %}


{% for capabilities_class in 
capabilities_loader.capabilities[class_name].get_extends_class_names("")%}
{{ imports.format_import_statement(capabilities_class, "providers.sample.") }}
{% endfor %}

{% set parameters = capabilities_loader.get_constructor_parameters_for_class(class_name)%}

{%- from 'generate_method_definition.j2' import generate_parameters -%}

class {{class_name}}({{interface_name}}, {{capabilities_loader.capabilities[class_name].extends|join(", ")}}):
    '''
    {{capabilities_loader.capabilities[class_name].information }}

    NOTE: This is a proxy - calling this returns an instance of a registered provider.
    Register a provider using the `register()` method.
    '''
    # References OBJECT PROXYING (PYTHON RECIPE) https://code.activestate.com/recipes/496741-object-proxying/

    def __getattribute__(self, name):
        return getattr(object.__getattribute__(self, "__proxied"), name)

    def __delattr__(self, name):
        delattr(object.__getattribute__(self, "__proxied"), name)

    def __setattr__(self, name, value):
        setattr(object.__getattribute__(self, "__proxied"), name, value)

    def __nonzero__(self):
        return bool(object.__getattribute__(self, "__proxied"))

    def __str__(self):
        return str(object.__getattribute__(self, "__proxied"))

    def __repr__(self):
        return repr(object.__getattribute__(self, "__proxied"))

    __slots__ = [
        "__proxied", 
        {# {{"\"__weakref__\"" if capabilities_loader.capabilities[class_name].extends|length == 0 else ""}}  #}
    ]
    

    def __init__(self, 
        {%for parameter in parameters -%} 
        {{generate_parameters(capabilities_loader, capabilities_method, parameter)}}
        {{-", " if not loop.last}} 
        {%-endfor%}):

        object.__setattr__(
            self,
            "__proxied", get_provider({{interface_name}})(
            {%for parameter in parameters -%} 
            {{parameter.name}}
            {{-", " if not loop.last}} 
            {%-endfor%}) # type: ignore
        )

{%- from 'generate_proxy_method.j2' import generate_proxy_method -%}


{%for capabilities_method in capabilities_loader.capabilities[class_name].methods %}
    {{generate_proxy_method(capabilities_loader, capabilities_method, use_abstract_method_decorator,interface_name, template_args.use_supported_decorator)}}
{%endfor%}

{%if template_args.generate_interface_only_capabilities_in_a_separate_file == false %}
{%for implements_class_names in capabilities_loader.capabilities[class_name].implements %}
    {%for capabilities_method in capabilities_loader.capabilities[implements_class_names].methods %}
    {{generate_proxy_method(capabilities_loader, capabilities_method, use_abstract_method_decorator,interface_name, template_args.use_supported_decorator)}}
    {%endfor%}
{%endfor%}
{%endif%}