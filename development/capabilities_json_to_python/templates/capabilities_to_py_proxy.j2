# THIS IS AN AUTO-GENERATE FILE. 
# DO NOT EDIT MANUALLY.
# Please run development/capabilities_json_to_python/capabilities_to_py.sh to generate this file.
# Copy this file and remove this header to create a new CodeToCAD Provider.

{% include 'common_imports.j2' %}

{%set interface_name = class_name + "Interface" %}
{% set imports = capabilities_loader.generate_imports(class_name, [class_name]) %}

from codetocad.providers import get_provider

from codetocad.interfaces.{{class_name|lower}}_interface import {{interface_name}}

{% for capabilities_class in imports.get_implementable_class_names("Interface") %}
{{ imports.format_import_statement(capabilities_class, "codetocad.interfaces.") }}
{% endfor %}

{% set parameters = capabilities_loader.get_constructor_parameters_for_class(class_name)%}

{%- from 'generate_method_definition.j2' import generate_parameters -%}

class {{class_name}}:
    '''
    {{capabilities_loader.capabilities[class_name].information }}

    NOTE: This is a proxy-factory - calling this returns an instance of a registered provider.
    Register a provider using the `register()` method.
    '''

    def __new__(cls, 
        {%for parameter in parameters -%} 
        {{generate_parameters(capabilities_loader, capabilities_method, parameter)}}
        {{-", " if not loop.last}} 
        {%-endfor%}) -> {{interface_name}}:
        return get_provider({{interface_name}})(
        {%for parameter in parameters -%} 
        {{parameter.name}}
        {{-", " if not loop.last}} 
        {%-endfor%}) # type: ignore

{%- from 'generate_method.j2' import generate_method -%}
{%for capabilities_method in capabilities_loader.capabilities[class_name].static_methods %}
    {{generate_method(capabilities_loader, capabilities_method, use_abstract_method_decorator)}}
{%endfor%}
