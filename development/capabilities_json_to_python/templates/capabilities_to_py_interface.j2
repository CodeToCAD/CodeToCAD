{#
This Jinja2 Template requires the following parameters:
- className
- methods
- superParameters, e.g. the ["constructor"]["parameters"] of the class this class implements.
#}
# THIS IS AN AUTO-GENERATE FILE.
# DO NOT EDIT MANUALLY.
# Please run development/capabilities_json_to_python/capabilities_to_py.sh to generate this file.

from typing import Optional
from abc import ABCMeta, abstractmethod
from codetocad.codetocad_types import *
from codetocad.core import *
from codetocad.enums import *
{%set implementedClassesWithSuffixes = []-%}
{% if "implements" in methods%}
{%set implementedClasses = methods["implements"]-%}
{% for implementedClass in implementedClasses.split(",") -%}
{%set implementedClassWithSuffix = implementedClass + classNameSuffix-%}
{%- set implementedClassesWithSuffixes = implementedClassesWithSuffixes.append(implementedClassWithSuffix)-%}
from codetocad.interfaces import {{implementedClassWithSuffix}}
{% endfor-%}
{%-endif%}

{%-set methodReturnTypes = []-%}
{%- from 'capabilities_to_py_utilities.j2' import typeMapping %}
{%-for methodName, properties in methods.items()-%}
{%-if "returnType" in properties -%}
{%-set returnType = typeMapping(properties["returnType"]) %}
{%-for codeToCADClassName in allCodeToCADClassNames-%}
{%-if codeToCADClassName in returnType and not codeToCADClassName == className and not codeToCADClassName + classNameSuffix in implementedClassesWithSuffixes -%}
{%-set methodReturnTypes = methodReturnTypes.append(codeToCADClassName)-%}
{%-endif%}
{%-endfor-%}
{%-endif%}
{%-endfor-%}
{%-for method in methodReturnTypes|unique%}
from . import {{method+classNameSuffix}}
{%endfor-%}


{%-set useAbstractMethodDecorator = True%}

class {{className+classNameSuffix}}({{implementedClassesWithSuffixes|join(",") + (", " if implementedClassesWithSuffixes|length > 0 else "")-}}metaclass=ABCMeta):
    {% if "information" in methods -%}
    '''
    {{- methods["information"] -}}
    '''
    {%-endif%}
{% include 'capabilities_to_py_class_definition.j2' %}