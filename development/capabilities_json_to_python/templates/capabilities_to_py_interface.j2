{#
This Jinja2 Template requires the following parameters:
- className
- methods
- superParameters, e.g. the ["constructor"]["parameters"] of the class this class implements.
#}
# THIS IS AN AUTO-GENERATE FILE.
# DO NOT EDIT MANUALLY.
# Please run development/capabilities_json_to_python/capabilities_to_py.sh to generate this file.

from abc import ABCMeta, abstractmethod

{%set use_abstract_method_decorator = True%}

{% include 'common_imports.j2' %}

from typing import TYPE_CHECKING

{%set interface_name = class_name + "Interface" %}
{% set imports = capabilities_loader.generate_imports(class_name, [class_name]) %}

{%set extended_classes = capabilities_loader.capabilities[class_name].get_extends_class_names( "Interface") %}
{%set implemented_classes = capabilities_loader.capabilities[class_name].get_implements_class_names( "Interface") %}

# Implementable dependencies:
{% for capabilities_class in imports.get_implementable_class_names("Interface")%}
if TYPE_CHECKING:
    {{ imports.format_import_statement(capabilities_class, "codetocad.interfaces.") }}
{% endfor %}

# Interface dependencies:
{% for capabilities_class in imports.get_interface_class_names("Interface")%}
{{ imports.format_import_statement(capabilities_class, "codetocad.interfaces.") }}
{% endfor %}

# Extended dependencies:
{% for capabilities_class in extended_classes%}
{{ imports.format_import_statement(capabilities_class, "codetocad.interfaces.") }}
{% endfor %}

{%set _ = implemented_classes.append("metaclass=ABCMeta")%}

class {{interface_name}}(
    {{-extended_classes|join(", ") + "," if  extended_classes|length >0}}
    {{implemented_classes|join(", ") if implemented_classes|length >0}}):

    '''
    {{capabilities_loader.capabilities[class_name].information }}
    '''

    {% include 'capabilities_to_py_class_definition.j2' %}
    