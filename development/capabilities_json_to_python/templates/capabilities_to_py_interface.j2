{#
This Jinja2 Template requires the following parameters:
- className
- methods
- superParameters, e.g. the ["constructor"]["parameters"] of the class this class implements.
#}
# THIS IS AN AUTO-GENERATE FILE.
# DO NOT EDIT MANUALLY.
# Please run development/capabilities_json_to_python/capabilities_to_py.sh to generate this file.

from typing import Optional
from abc import ABCMeta, abstractmethod

{%-set extendedClassesWithSuffixes = []-%}
{%- if "extends" in methods-%}
{%-set extendedClasses = methods["extends"]-%}
{%-for extendedClass in extendedClasses.split(",") -%}
{%-set extendedClassWithSuffix = extendedClass + classNameSuffix-%}
{%- set extendedClassesWithSuffixes = extendedClassesWithSuffixes.append(extendedClassWithSuffix)-%}
{%-endfor-%}
{%-endif%}


{%-set implementedClassesWithSuffixes = []-%}
{%- if "implements" in methods-%}
{%-set implementedClasses = methods["implements"]-%}
{%-for implementedClass in implementedClasses.split(",") -%}
{%-set implementedClassWithSuffix = implementedClass + "Interface"-%}
{%- set implementedClassesWithSuffixes = implementedClassesWithSuffixes.append(implementedClassWithSuffix)-%}
{%-endfor-%}
{%-endif%}

{% include 'common_imports.j2' %}

{% if implementedClassesWithSuffixes|length > 0%}
from codetocad.interfaces import ({{implementedClassesWithSuffixes|join(", ")}})
{%-endif%} 
{% if extendedClassesWithSuffixes|length > 0%}
from . import ({{extendedClassesWithSuffixes|join(", ")}})
{%-endif%}

{% include 'type_check_imports.j2' %}

{%set use_abstract_method_decorator = True%}

class {{className+classNameSuffix}}({{extendedClassesWithSuffixes|join(",") + (", " if extendedClassesWithSuffixes|length > 0 else "") + implementedClassesWithSuffixes|join(",") + (", " if implementedClassesWithSuffixes|length > 0 else "")-}}metaclass=ABCMeta):
    {% if "information" in methods -%}
    '''
    {{- methods["information"] -}}
    '''
    {%-endif%}

{% include 'capabilities_to_py_class_definition.j2' %}