{#

Nesting is formatted like this:
    className > methods > properties > parameters/information > definitions

Sample context:
    "shape": => className
        "information": => a method
            "Capabilities related to adding, multiplying, and/or modifying a shape.",
        "constructor": { => a method
            "parameters": => a property
                {"name": => a parameter
                    {"type": "string"} => a definition
                },
        },
        "fromFile": { => a method
            "information": => a property
                "Create a shape from a file.",
            "parameters": => a property
                {"filePath": => a parameter
                    {"type": "string"}, => a definition
                "fileType": => a parameter
                    {"type": "string", "required": false} => a definition
                }
        }

-#}
from utilities import Dimension, CurveTypes, Point, Angle

{% set types = {"string":"str", "array": "list", "object": "dict", "number":"int", "float":"float", "boolean":"bool"} -%}
{% macro typeMapping(typeName) -%}
    {{types[typeName] if typeName in types else typeName}}
{%- endmacro %}
{%- for className, methods in capabilities.items() -%}

class {{className}}: {# e.g. shape #}

    {%-for method, properties in methods.items() -%} {# e.g. "parameters": {"name": {"type": "string"}} #}

    {%- set parameters = properties["parameters"] if "parameters" in properties else {} -%}

    {%- if method == "information" %}
    # {{ information }}

    {%- elif method == "constructor"-%}

    {{ parameters.keys()| join(' = None\n    ') }} {{-" = None" if parameters.keys()|length>0}}

    def __init__(self
    {%- if parameters.keys()|length > 0 -%}
    ,
    {%-for parameter, definition in parameters.items() -%} {# e.g. {"name":{"type": "string"}} #}
    {{ parameter }} {{-":" + typeMapping(definition.type) if definition.type and definition.type != "any" }} {{- "=None" if definition and definition.required == false -}} {{-"," if not loop.last}} \
    {%-endfor%}
    {%-endif%}
    ):
    {%-for parameter, definition in parameters.items() -%} {# e.g. {"name":{"type": "string"}} #}
        self.{{ parameter }} = {{parameter}}
    {%- else %}
        pass
    {%-endfor%}

    {%- else %}

    def {{method}}(self
    {%- if parameters.keys()|length > 0 -%}
    ,
    {%-for parameter, definition in parameters.items() -%} {# e.g. {"name":{"type": "string"}} #}
    {{ parameter }} {{-":" + typeMapping(definition.type) if definition.type and definition.type != "any" }} {{- "=None" if definition and definition.required == false -}} {{-", " if not loop.last}} \
    {%-endfor%}
    {%-endif%}
    ):
        print("{{method}} is not implemented") # implement 
        return {{ "self" if "action" in properties and properties["action"] != "get" else "\"return value here\"" }}
    
    {%-endif-%}

    {%-endfor%}

{% endfor -%}