{
    "information": "Capabilities for CodeToCAD.",
    "capabilities": {
        "Scalable": {
            "information": "An entity that can be transformed by a scale.",
            "is_interface_only": true,
            "scale_xyz": {
                "action": "modify",
                "information": "Scale in the XYZ directions. Pass a number, Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "x": {
                        "type": "string,float,Dimension"
                    },
                    "y": {
                        "type": "string,float,Dimension"
                    },
                    "z": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "scale_x": {
                "action": "modify",
                "information": "Scale in the X direction. Pass a number, Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "scale_y": {
                "action": "modify",
                "information": "Scale in the Y direction. Pass a number, Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "scale_z": {
                "action": "modify",
                "information": "Scale in the Z direction. Pass a number, Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "scale_x_by_factor": {
                "action": "modify",
                "information": "Scale in the X direction by a multiple.",
                "parameters": {
                    "scale_factor": {
                        "type": "float"
                    }
                }
            },
            "scale_y_by_factor": {
                "action": "modify",
                "information": "Scale in the Y direction by a multiple.",
                "parameters": {
                    "scale_factor": {
                        "type": "float"
                    }
                }
            },
            "scale_z_by_factor": {
                "action": "modify",
                "information": "Scale in the X direction by a multiple.",
                "parameters": {
                    "scale_factor": {
                        "type": "float"
                    }
                }
            },
            "scale_keep_aspect_ratio": {
                "action": "modify",
                "information": "Scale in one axis and maintain the others. Pass a Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    },
                    "axis": {
                        "type": "string,int,Axis"
                    }
                }
            }
        },
        "Booleanable":{
            "information": "An entity that supports boolean operations: union, intersect, subtract.",
            "is_interface_only": true,
            "union": {
                "action": "modify",
                "information": "Boolean union",
                "parameters": {
                    "other": {
                        "type": "string,Booleanable"
                    },
                    "delete_after_union": {
                        "type": "boolean",
                        "default_value": true
                    },
                    "is_transfer_data": {
                        "type": "boolean",
                        "default_value": false
                    }
                }
            },
            "subtract": {
                "action": "modify",
                "information": "Boolean subtraction",
                "parameters": {
                    "other": {
                        "type": "string,Booleanable"
                    },
                    "delete_after_subtract": {
                        "type": "boolean",
                        "default_value": true
                    },
                    "is_transfer_data": {
                        "type": "boolean",
                        "default_value": false
                    }
                }
            },
            "intersect": {
                "action": "modify",
                "information": "Boolean intersection",
                "parameters": {
                    "other": {
                        "type": "string,Booleanable"
                    },
                    "delete_after_intersect": {
                        "type": "boolean",
                        "default_value": true
                    },
                    "is_transfer_data": {
                        "type": "boolean",
                        "default_value": false
                    }
                }
            }
        },
        "Landmarkable": {
            "information": "An entity that can be use landmarks.",
            "is_interface_only": true,
            "create_landmark": {
                "action": "get",
                "return_type": "Landmark",
                "information": "Shortcut for creating and assigning a landmark to this entity. Returns a Landmark instance.",
                "parameters": {
                    "landmark_name": {
                        "type": "string"
                    },
                    "x": {
                        "type": "string,float,Dimension"
                    },
                    "y": {
                        "type": "string,float,Dimension"
                    },
                    "z": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "get_landmark": {
                "action": "get",
                "return_type": "Landmark",
                "information": "Get the landmark by name",
                "parameters": {
                    "landmark_name": {
                        "type": "string,PresetLandmark"
                    }
                }
            }
        },
        "Mirrorable": {
            "information": "An entity that can be mirrored.",
            "is_interface_only": true,
            "mirror": {
                "action": "create",
                "information": "Mirror an existing entity with respect to a landmark. If a name is provided, the mirror becomes a separate entity.",
                "parameters": {
                    "mirror_across_entity": {
                        "type": "string,Entity"
                    },
                    "axis": {
                        "type": "string,int,Axis"
                    },
                    "resulting_mirrored_entity_name": {
                        "type": "string",
                        "required": false
                    }
                }
            }
        },
        "Patternable": {
            "information": "An entity that can be patterned.",
            "is_interface_only": true,
            "linear_pattern": {
                "action": "modify",
                "information": "Pattern in a uniform direction.",
                "parameters": {
                    "instance_count": {
                        "type": "int"
                    },
                    "offset": {
                        "type": "string,float,Dimension"
                    },
                    "direction_axis": {
                        "type": "string,int,Axis",
                        "default_value": "z"
                    }
                }
            },
            "circular_pattern": {
                "action": "modify",
                "information": "Pattern in a circular direction.",
                "parameters": {
                    "instance_count": {
                        "type": "int"
                    },
                    "separation_angle": {
                        "type": "string,float,Angle"
                    },
                    "center_entity_or_landmark": {
                        "type": "string,Entity"
                    },
                    "normal_direction_axis": {
                        "type": "string,int,Axis",
                        "default_value": "z"
                    }
                }
            }
        },
        "Subdividable": {
            "information": "An entity that can be broken down or scaled up into more components.",
            "is_interface_only": true,
            "remesh": {
                "action": "modify",
                "information": "Remeshing changes the shape of an entity.",
                "parameters": {
                    "strategy": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "float"
                    }
                }
            },
            "subdivide": {
                "action": "modify",
                "information": "Subdivide an entity into more components.",
                "parameters": {
                    "amount": {
                        "type": "float"
                    }
                }
            },
            "decimate": {
                "action": "modify",
                "information": "Decimate an entity into less components.",
                "parameters": {
                    "amount": {
                        "type": "float"
                    }
                }
            }
        },
        "Importable": {
            "information": "An entity that can be imported from a file.",
            "is_interface_only": true,
            "create_from_file": {
                "action": "create",
                "information": "Imports geometry from a file.",
                "parameters": {
                    "file_path": {
                        "type": "string"
                    },
                    "file_type": {
                        "type": "string",
                        "required": false
                    }
                }
            }
        },
        "Exportable": {
            "information": "An enttiy that can be exported.",
            "is_interface_only": true,
            "export": {
                "action": "interact",
                "information": "Export Entity. Use the filePath to control the export type, e.g. '/path/to/cube.obj' or '/path/to/curve.svg'",
                "parameters": {
                    "file_path": {
                        "type": "string"
                    },
                    "overwrite": {
                        "type": "boolean",
                        "default_value": true
                    },
                    "scale": {
                        "type": "float",
                        "default_value": 1.0
                    }
                }
            }
        },
        "Projectable": {
            "information": "This entity can be projected onto a surface",
            "is_interface_only": true,
            "project": {
                "information": "Project this entity onto another",
                "action": "get",
                "return_type": "Projectable",
                "parameters": {
                    "project_onto": {
                        "information": "Projectable to project onto",
                        "type": "Projectable",
                        "required": true
                    }
                }
            }
        },
        "Entity": {
            "information": "Capabilities shared between scene objects.",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    },
                    "native_instance": {
                        "information": "A cached instance of the native object. This may become stale.",
                        "type": "any",
                        "required": false
                    }
                }
            },
            "is_exists": {
                "action": "get",
                "information": "Check if an entity exists",
                "return_type": "boolean"
            },
            "rename": {
                "action": "modify",
                "information": "Rename the entity, with an option to rename linked landmarks and underlying data.",
                "parameters": {
                    "new_name": {
                        "type": "string"
                    },
                    "renamelinked_entities_and_landmarks": {
                        "type": "boolean",
                        "default_value": true
                    }
                }
            },
            "delete": {
                "action": "delete",
                "information": "Delete the entity from the scene. You may need to delete an associated joint or other features.",
                "parameters": {
                    "remove_children": {
                        "type": "boolean",
                        "default_value": true
                    }
                }
            },
            "is_visible": {
                "action": "get",
                "information": "Returns whether the entity is visible in the scene.",
                "return_type": "boolean"
            },
            "set_visible": {
                "action": "interact",
                "information": "Toggles visibility of an entity in the scene.",
                "parameters": {
                    "is_visible": {
                        "type": "boolean"
                    }
                }
            },
            "apply": {
                "action": "modify",
                "information": "Apply any modifications. This is application specific, but a general function is that it finalizes any changes made to an entity.",
                "parameters": {
                    "rotation": {
                        "type": "boolean",
                        "default_value": true
                    },
                    "scale": {
                        "type": "boolean",
                        "default_value": true
                    },
                    "location": {
                        "type": "boolean",
                        "default_value": false
                    },
                    "modifiers": {
                        "type": "boolean",
                        "default_value": true
                    }
                }
            },
            "get_native_instance": {
                "action": "get",
                "information": "Get the native API's object instance. For example, in Blender API, this would return a bpy.object instance.",
                "return_type": "any",
                "parameters": {}
            },
            "get_location_world": {
                "action": "get",
                "return_type": "Point",
                "information": "Get the entities XYZ location relative to World Space.",
                "parameters": {}
            },
            "get_location_local": {
                "action": "get",
                "return_type": "Point",
                "information": "Get the entities XYZ location relative to Local Space.",
                "parameters": {}
            },
            "select": {
                "action": "interact",
                "information": "Select the entity (in UI).",
                "parameters": {}
            },
            "translate_xyz": {
                "action": "modify",
                "information": "Translate in the XYZ directions. Pass a number, Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "x": {
                        "type": "string,float,Dimension"
                    },
                    "y": {
                        "type": "string,float,Dimension"
                    },
                    "z": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "translate_x": {
                "action": "modify",
                "information": "Translate in the X direction. Pass a number or Dimension or Dimension-String (e.g. '2cm') to translate to a specific length.",
                "parameters": {
                    "amount": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "translate_y": {
                "action": "modify",
                "information": "Translate in the Y direction. Pass a number or Dimension or Dimension-String (e.g. '2cm') to translate to a specific length.",
                "parameters": {
                    "amount": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "translate_z": {
                "action": "modify",
                "information": "Translate in the z direction. Pass a number or Dimension or Dimension-String (e.g. '2cm') to translate to a specific length.",
                "parameters": {
                    "amount": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "rotate_xyz": {
                "action": "modify",
                "information": "Rotate in the XYZ direction. Default units is degrees. Pass in a number, Angle or Angle-String (e.g. 'PI/4radians' or 'PI/4r' or '90d'",
                "parameters": {
                    "x": {
                        "type": "string,float,Angle"
                    },
                    "y": {
                        "type": "string,float,Angle"
                    },
                    "z": {
                        "type": "string,float,Angle"
                    }
                }
            },
            "rotate_x": {
                "action": "modify",
                "information": "Rotate in the X direction. Default units is degrees. Pass in a number, Angle or Angle-String (e.g. 'PI/4radians' or 'PI/4r' or '90d'",
                "parameters": {
                    "rotation": {
                        "type": "string,float,Angle"
                    }
                }
            },
            "rotate_y": {
                "action": "modify",
                "information": "Rotate in the Y direction. Default units is degrees. Pass in a number, Angle or Angle-String (e.g. 'PI/4radians' or 'PI/4r' or '90d'",
                "parameters": {
                    "rotation": {
                        "type": "string,float,Angle"
                    }
                }
            },
            "rotate_z": {
                "action": "modify",
                "information": "Rotate in the Z direction. Default units is degrees. Pass in a number, Angle or Angle-String (e.g. 'PI/4radians' or 'PI/4r' or '90d'",
                "parameters": {
                    "rotation": {
                        "type": "string,float,Angle"
                    }
                }
            },
            "get_bounding_box": {
                "action": "get",
                "return_type": "BoundaryBox",
                "information": "Get the Boundary Box around the entity.",
                "parameters": {}
            },
            "get_dimensions": {
                "action": "get",
                "return_type": "Dimensions",
                "information": "Get the length span in each point axis (X,Y,Z).",
                "parameters": {}
            }
        },
        "Part": {
            "information": "Capabilities related to creating and manipulating 3D shapes.",
            "extends": "Entity",
            "implements": "Mirrorable,Patternable,Subdividable,Importable,Exportable,Scalable,Landmarkable,Booleanable",
            "create_cube": {
                "action": "create",
                "information": "Adds cuboid geometry to a part.",
                "parameters": {
                    "width": {
                        "type": "string,float,Dimension"
                    },
                    "length": {
                        "type": "string,float,Dimension"
                    },
                    "height": {
                        "type": "string,float,Dimension"
                    },
                    "keyword_arguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "create_cone": {
                "action": "create",
                "information": "Adds cone geometry to a part.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "height": {
                        "type": "string,float,Dimension"
                    },
                    "draft_radius": {
                        "type": "string,float,Dimension",
                        "default_value": 0
                    },
                    "keyword_arguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "create_cylinder": {
                "action": "create",
                "information": "Adds cylinder geometry to a part.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "height": {
                        "type": "string,float,Dimension"
                    },
                    "keyword_arguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "create_torus": {
                "action": "create",
                "information": "Adds torus geometry to a part.",
                "parameters": {
                    "inner_radius": {
                        "type": "string,float,Dimension"
                    },
                    "outer_radius": {
                        "type": "string,float,Dimension"
                    },
                    "keyword_arguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "create_sphere": {
                "action": "create",
                "information": "Adds sphere geometry to a part.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "keyword_arguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "create_gear": {
                "action": "create",
                "information": "Adds gear geometry to a part.",
                "parameters": {
                    "outer_radius": {
                        "type": "string,float,Dimension"
                    },
                    "addendum": {
                        "type": "string,float,Dimension"
                    },
                    "inner_radius": {
                        "type": "string,float,Dimension"
                    },
                    "dedendum": {
                        "type": "string,float,Dimension"
                    },
                    "height": {
                        "type": "string,float,Dimension"
                    },
                    "pressure_angle": {
                        "type": "string,float,Angle",
                        "default_value": "20d"
                    },
                    "number_of_teeth": {
                        "type": "int",
                        "default_value": 12
                    },
                    "skew_angle": {
                        "type": "string,float,Angle",
                        "default_value": 0
                    },
                    "conical_angle": {
                        "type": "string,float,Angle",
                        "default_value": 0
                    },
                    "crown_angle": {
                        "type": "string,float,Angle",
                        "default_value": 0
                    },
                    "keyword_arguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "clone": {
                "action": "get",
                "return_type": "Part",
                "information": "Clone an existing Part with its geometry and properties. Returns the new Part.",
                "parameters": {
                    "new_name": {
                        "type": "string"
                    },
                    "copy_landmarks": {
                        "type": "boolean",
                        "default_value": true
                    }
                }
            },
            "hollow": {
                "action": "modify",
                "information": "Remove vertices, if necessary, until the part has a specified wall thickness.",
                "parameters": {
                    "thickness_x": {
                        "type": "string,float,Dimension"
                    },
                    "thickness_y": {
                        "type": "string,float,Dimension"
                    },
                    "thickness_z": {
                        "type": "string,float,Dimension"
                    },
                    "start_axis": {
                        "type": "string,int,Axis",
                        "default_value": "z"
                    },
                    "flip_axis": {
                        "type": "boolean",
                        "default_value": false
                    }
                }
            },
            "thicken": {
                "action": "modify",
                "information": "Uniformly add a wall around a Part.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "hole": {
                "action": "modify",
                "information": "Create a hole.",
                "parameters": {
                    "hole_landmark": {
                        "type": "string,Landmark"
                    },
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "depth": {
                        "type": "string,float,Dimension"
                    },
                    "normal_axis": {
                        "type": "string,int,Axis",
                        "default_value": "z"
                    },
                    "flip_axis": {
                        "type": "boolean",
                        "default_value": false
                    },
                    "initial_rotation_x": {
                        "type": "string,float,Angle",
                        "default_value": 0.0
                    },
                    "initial_rotation_y": {
                        "type": "string,float,Angle",
                        "default_value": 0.0
                    },
                    "initial_rotation_z": {
                        "type": "string,float,Angle",
                        "default_value": 0.0
                    },
                    "mirror_about_entity_or_landmark": {
                        "type": "string,Entity",
                        "required": false
                    },
                    "mirror_axis": {
                        "type": "string,int,Axis",
                        "default_value": "x"
                    },
                    "mirror": {
                        "type": "boolean",
                        "default_value": false
                    },
                    "circular_pattern_instance_count": {
                        "type": "int",
                        "default_value": 1
                    },
                    "circular_pattern_instance_separation": {
                        "type": "string,float,Angle",
                        "default_value": 0.0
                    },
                    "circular_pattern_instance_axis": {
                        "type": "string,int,Axis",
                        "default_value": "z"
                    },
                    "circular_pattern_about_entity_or_landmark": {
                        "type": "string,Entity",
                        "required": false
                    },
                    "linear_pattern_instance_count": {
                        "type": "int",
                        "default_value": 1
                    },
                    "linear_pattern_instance_separation": {
                        "type": "string,float,Dimension",
                        "default_value": 0.0
                    },
                    "linear_pattern_instance_axis": {
                        "type": "string,int,Axis",
                        "default_value": "x"
                    },
                    "linear_pattern2nd_instance_count": {
                        "type": "int",
                        "default_value": 1
                    },
                    "linear_pattern2nd_instance_separation": {
                        "type": "string,float,Dimension",
                        "default_value": 0.0
                    },
                    "linear_pattern2nd_instance_axis": {
                        "type": "string,int,Axis",
                        "default_value": "y"
                    }
                }
            },
            "twist": {
                "action": "modify",
                "information": "AKA Helix, Screw. Revolve an entity",
                "parameters": {
                    "angle": {
                        "type": "string,float,Angle"
                    },
                    "screw_pitch": {
                        "type": "string,float,Dimension"
                    },
                    "iterations": {
                        "type": "int",
                        "default_value": 1
                    },
                    "axis": {
                        "type": "string,int,Axis",
                        "default_value": "z"
                    }
                }
            },
            "set_material": {
                "action": "modify",
                "information": "Assign a known material to this part.",
                "parameters": {
                    "material_name": {
                        "type": "string,Material"
                    }
                }
            },
            "is_colliding_with_part": {
                "action": "get",
                "information": "Check if this part is colliding with another.",
                "return_type": "boolean",
                "parameters": {
                    "other_part": {
                        "type": "string,Part"
                    }
                }
            },
            "fillet_all_edges": {
                "action": "modify",
                "information": "Fillet all edges.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "use_width": {
                        "type": "boolean",
                        "default_value": false
                    }
                }
            },
            "fillet_edges": {
                "action": "modify",
                "information": "Fillet specific edges.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "landmarks_near_edges": {
                        "type": "list[string,Landmark]"
                    },
                    "use_width": {
                        "type": "boolean",
                        "default_value": false
                    }
                }
            },
            "fillet_faces": {
                "action": "modify",
                "information": "Fillet specific faces.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "landmarks_near_faces": {
                        "type": "list[string,Landmark]"
                    },
                    "use_width": {
                        "type": "boolean",
                        "default_value": false
                    }
                }
            },
            "chamfer_all_edges": {
                "action": "modify",
                "information": "Chamfer all edges.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "chamfer_edges": {
                "action": "modify",
                "information": "Chamfer specific edges.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "landmarks_near_edges": {
                        "type": "list[string,Landmark]"
                    }
                }
            },
            "chamfer_faces": {
                "action": "modify",
                "information": "Chamfer specific faces.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "landmarks_near_faces": {
                        "type": "list[string,Landmark]"
                    }
                }
            },
            "select_vertex_near_landmark": {
                "action": "interact",
                "information": "Select the vertex closest to a Landmark on the entity (in UI).",
                "parameters": {
                    "landmark_name": {
                        "required": false,
                        "type": "string,Landmark"
                    }
                }
            },
            "select_edge_near_landmark": {
                "action": "interact",
                "information": "Select an edge closest to a landmark on the entity (in UI).",
                "parameters": {
                    "landmark_name": {
                        "required": false,
                        "type": "string,Landmark"
                    }
                }
            },
            "select_face_near_landmark": {
                "action": "interact",
                "information": "Select a face closest to a landmark on the entity (in UI).",
                "parameters": {
                    "landmark_name": {
                        "required": false,
                        "type": "string,Landmark"
                    }
                }
            }
        },
        "Sketch": {
            "information": "Capabilities related to creating and manipulating 2D sketches, composed of vertices, edges and wires.",
            "extends": "Entity",
            "implements": "Mirrorable,Patternable,Importable,Exportable,Scalable,Projectable,Landmarkable",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string"
                    },
                    "curve_type": {
                        "type": "CurveTypes",
                        "required": false
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "clone": {
                "action": "get",
                "return_type": "Sketch",
                "information": "Clone an existing sketch with its geometry and properties. Returns the new Sketch.",
                "parameters": {
                    "new_name": {
                        "type": "string"
                    },
                    "copy_landmarks": {
                        "type": "boolean",
                        "default_value": true
                    }
                }
            },
            "revolve": {
                "action": "get",
                "return_type": "Part",
                "information": "Revolve a Sketch around another Entity or Landmark",
                "parameters": {
                    "angle": {
                        "type": "string,float,Angle"
                    },
                    "about_entity_or_landmark": {
                        "type": "string,Entity"
                    },
                    "axis": {
                        "type": "string,int,Axis",
                        "default_value": "z"
                    }
                }
            },
            "twist": {
                "action": "modify",
                "information": "AKA Helix, Screw.",
                "parameters": {
                    "angle": {
                        "type": "string,float,Angle"
                    },
                    "screw_pitch": {
                        "type": "string,float,Dimension"
                    },
                    "iterations": {
                        "type": "int",
                        "default_value": 1
                    },
                    "axis": {
                        "type": "string,int,Axis",
                        "default_value": "z"
                    }
                }
            },
            "extrude": {
                "action": "get",
                "return_type": "Part",
                "information": "Extrude a curve by a specified length. Returns a Part type.",
                "parameters": {
                    "length": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "sweep": {
                "action": "get",
                "return_type": "Part",
                "information": "Extrude this Sketch along the path of another Sketch",
                "parameters": {
                    "profile_name_or_instance": {
                        "type": "string,Sketch"
                    },
                    "fill_cap": {
                        "type": "boolean",
                        "default_value": true
                    }
                }
            },
            "offset": {
                "action": "modify",
                "information": "Uniformly add a wall around a Sketch.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "profile": {
                "action": "modify",
                "information": "Bend this curve along the path of another",
                "parameters": {
                    "profile_curve_name": {
                        "type": "string"
                    }
                }
            },
            "create_text": {
                "action": "create",
                "information": "Adds text to a sketch.",
                "parameters": {
                    "text": {
                        "type": "string"
                    },
                    "font_size": {
                        "type": "string,float,Dimension",
                        "default_value": 1.0
                    },
                    "bold": {
                        "type": "boolean",
                        "default_value": false
                    },
                    "italic": {
                        "type": "boolean",
                        "default_value": false
                    },
                    "underlined": {
                        "type": "boolean",
                        "default_value": false
                    },
                    "character_spacing": {
                        "type": "int",
                        "default_value": 1
                    },
                    "word_spacing": {
                        "type": "int",
                        "default_value": 1
                    },
                    "line_spacing": {
                        "type": "int",
                        "default_value": 1
                    },
                    "font_file_path": {
                        "type": "string",
                        "default_value": null,
                        "required": false
                    }
                }
            },
            "create_from_vertices": {
                "action": "get",
                "return_type": "Wire",
                "information": "Create a curve from 2D/3D points.",
                "parameters": {
                    "points": {
                        "type": "list[string,list[string],list[float],list[Dimension],Point,Vertex]"
                    }
                }
            },
            "create_point": {
                "action": "get",
                "return_type": "Vertex",
                "information": "Create a point",
                "parameters": {
                    "point": {
                        "type": "string,list[string],list[float],list[Dimension],Point"
                    }
                }
            },
            "create_line": {
                "action": "get",
                "return_type": "Edge",
                "information": "Create a line between two points",
                "parameters": {
                    "start_at": {
                        "type": "string,list[string],list[float],list[Dimension],Point,Vertex"
                    },
                    "end_at": {
                        "type": "string,list[string],list[float],list[Dimension],Point,Vertex"
                    }
                }
            },
            "create_circle": {
                "action": "get",
                "return_type": "Wire",
                "information": "Create a circle",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "create_ellipse": {
                "action": "get",
                "return_type": "Wire",
                "information": "Create an ellipse",
                "parameters": {
                    "radius_minor": {
                        "type": "string,float,Dimension"
                    },
                    "radius_major": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "create_arc": {
                "action": "get",
                "return_type": "Wire",
                "information": "Create an arc. The radius is the distance from the center of the circle that forms the arc, to the chord tying start_at and end_at.",
                "parameters": {
                    "start_at": {
                        "type": "string,list[string],list[float],list[Dimension],Point,Vertex"
                    },
                    "end_at": {
                        "type": "string,list[string],list[float],list[Dimension],Point,Vertex"
                    },
                    "radius": {
                        "information": "The radius is the distance from the center of the circle that forms the arc, to the chord tying start_at and end_at.",
                        "type": "string,float,Dimension"
                    },
                    "flip": {
                        "type": "boolean",
                        "required": false,
                        "default_value": false
                    }
                }
            },
            "create_rectangle": {
                "action": "get",
                "return_type": "Wire",
                "information": "Create a rectangle",
                "parameters": {
                    "length": {
                        "type": "string,float,Dimension"
                    },
                    "width": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "create_polygon": {
                "action": "get",
                "return_type": "Wire",
                "information": "Create an n-gon",
                "parameters": {
                    "number_of_sides": {
                        "type": "int"
                    },
                    "length": {
                        "type": "string,float,Dimension"
                    },
                    "width": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "create_trapezoid": {
                "action": "get",
                "return_type": "Wire",
                "information": "Create a trapezoid",
                "parameters": {
                    "length_upper": {
                        "type": "string,float,Dimension"
                    },
                    "length_lower": {
                        "type": "string,float,Dimension"
                    },
                    "height": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "create_spiral": {
                "action": "get",
                "return_type": "Wire",
                "information": "Create a spiral or helix",
                "parameters": {
                    "number_of_turns": {
                        "type": "int"
                    },
                    "height": {
                        "type": "string,float,Dimension"
                    },
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "is_clockwise": {
                        "type": "boolean",
                        "default_value": true
                    },
                    "radius_end": {
                        "information": "Specify a radiusEnd to make a conical or drafted spiral. Pass None to make a cylindrical spiral.",
                        "type": "string,float,Dimension",
                        "required": false
                    }
                }
            }
        },
        "Vertex": {
            "information": "A single point in space, or a control point.",
            "extends": "Entity",
            "implements": "Projectable",
            "constructor": {
                "parameters": {
                    "location": {
                        "information": "Point coordinates of a vertex.",
                        "type": "Point"
                    },
                    "parent_entity": {
                        "type": "string,Entity",
                        "required": false
                    }
                }
            },
            "get_control_points": {
                "information": "Get a vertex's curve control points. This may not be applicable in several situations.",
                "action": "get",
                "return_type": "list[Vertex]",
                "is_static_method": false
            }
        },
        "Edge": {
            "information": "A curve bounded by two Vertices.",
            "extends": "Entity",
            "implements": "Mirrorable,Patternable,Subdividable,Projectable,Landmarkable",
            "constructor": {
                "parameters": {
                    "v1": {
                        "type": "Vertex"
                    },
                    "v2": {
                        "type": "Vertex"
                    },
                    "parent_entity": {
                        "type": "string,Entity",
                        "required": false
                    }
                }
            },
            "offset": {
                "information": "Clone and offset this edge a distance away from this one.",
                "action": "get",
                "return_type": "Edge",
                "parameters": {
                    "distance": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "fillet": {
                "information": "Fillet this and another edge.",
                "action": "modify",
                "parameters": {
                    "other_edge": {
                        "type": "Edge"
                    },
                    "amount": {
                        "type": "string,float,Angle"
                    }
                }
            },
            "set_is_construction": {
                "information": "Mark this edge for construction only.",
                "action": "modify",
                "parameters": {
                    "is_construction": {
                        "type": "boolean"
                    }
                }
            },
            "get_is_construction": {
                "information": "Check if this edge is for construction only.",
                "action": "get",
                "return_type": "boolean"
            }
        },
        "Wire": {
            "information": "A collection of connected edges.",
            "extends": "Entity",
            "implements": "Mirrorable,Patternable,Projectable,Landmarkable,Booleanable",
            "constructor": {
                "parameters": {
                    "edges": {
                        "information": "A collection of edges",
                        "type": "list[Edge]"
                    },
                    "parent_entity": {
                        "type": "string,Entity",
                        "required": false
                    }
                }
            },
            "clone": {
                "action": "get",
                "return_type": "Wire",
                "information": "Clone an existing Wire with an option to assign to a new Sketch. Returns the new Wire.",
                "parameters": {
                    "new_name": {
                        "type": "string"
                    },
                    "new_parent": {
                        "type": "string,Sketch",
                        "required": false
                    }
                }
            },
            "get_normal": {
                "information": "Get the normal created by this wire. Must be a closed wire.",
                "action": "get",
                "return_type": "Point",
                "parameters": {
                    "flip":{
                        "information": "Flip the normal direction.",
                        "type": "boolean",
                        "default_value": false,
                        "required": false
                    }
                }
            },
            "get_vertices": {
                "information": "Collapse all edges' vertices into one list.",
                "action": "get",
                "return_type": "list[Vertex]"
            },
            "get_is_closed": {
                "information": "Checks if a wire is closed. Note: A closed wire is a Face or Surface.",
                "action": "get",
                "return_type": "boolean"
            },
            "loft": {
                "action": "get",
                "return_type": "Part",
                "information": "Create a surface between two Wires (Faces). If new_part_name is not provided, the two Wires' parents and the surface will be boolean union'ed, and the resulting Part will take the name of the first wire.",
                "parameters": {
                    "other": {
                        "type": "Wire",
                        "information": "The other wire/face to loft to."
                    },
                    "new_part_name": {
                        "type": "string",
                        "required": false,
                        "information": "If provided, the resulting part will not be merged with the parent of this wire/face."
                    }
                }
            }
        },
        "Landmark": {
            "information": "Landmarks are named positions on an entity.",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string",
                        "required": true
                    },
                    "parent_entity": {
                        "type": "string,Entity",
                        "required": true
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "get_location_world": {
                "action": "get",
                "return_type": "Point",
                "information": "Get the Landmark XYZ location relative to World Space.",
                "parameters": {}
            },
            "get_location_local": {
                "action": "get",
                "return_type": "Point",
                "information": "Get the Landmark XYZ location relative to Local Space.",
                "parameters": {}
            },
            "translate_xyz": {
                "action": "modify",
                "information": "Translate in the XYZ directions. Pass a number, Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "x": {
                        "type": "string,float,Dimension"
                    },
                    "y": {
                        "type": "string,float,Dimension"
                    },
                    "z": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "clone": {
                "action": "get",
                "return_type": "Landmark",
                "information": "Clone an existing Landmark with an optional offset, and reassignment to a different parent. Returns the new Landmark.",
                "parameters": {
                    "new_name": {
                        "type": "string"
                    },
                    "offset": {
                        "type": "string,list[string],list[float],list[Dimension],Dimensions",
                        "required": false
                    },
                    "new_parent": {
                        "type": "string,Entity",
                        "required": false
                    }
                }
            },
            "get_landmark_entity_name": {
                "information": "Get the landmark object name in the scene, which may be different to the name of the landmark when it was first created. For example, the generated name may be {parentName}_{landmarkName}.",
                "action": "get",
                "return_type": "string"
            },
            "get_parent_entity": {
                "information": "Get the name of the entity this landmark belongs to.",
                "action": "get",
                "return_type": "Entity"
            }
        },
        "Joint": {
            "information": "Joints define the relationships and constraints between entities.",
            "constructor": {
                "parameters": {
                    "entity1": {
                        "type": "string,Entity"
                    },
                    "entity2": {
                        "type": "string,Entity"
                    }
                }
            },
            "translate_landmark_onto_another": {
                "action": "modify",
                "information": "Transforms one landmark onto another",
                "parameters": {}
            },
            "pivot": {
                "action": "modify",
                "information": "Constraint the rotation origin of entity B to entity A's landmark.",
                "parameters": {}
            },
            "gear_ratio": {
                "action": "modify",
                "information": "Constraint the rotation of entity B to be a percentage of entity A's",
                "parameters": {
                    "ratio": {
                        "type": "float"
                    }
                }
            },
            "limit_location_xyz": {
                "action": "modify",
                "information": "Constraint the translation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "x": {
                        "type": "string,float,Dimension",
                        "required": false
                    },
                    "y": {
                        "type": "string,float,Dimension",
                        "required": false
                    },
                    "z": {
                        "type": "string,float,Dimension",
                        "required": false
                    }
                }
            },
            "limit_location_x": {
                "action": "modify",
                "information": "Constraint the translation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,float,Dimension",
                        "required": false
                    },
                    "max": {
                        "type": "string,float,Dimension",
                        "required": false
                    }
                }
            },
            "limit_location_y": {
                "action": "modify",
                "information": "Constraint the translation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,float,Dimension",
                        "required": false
                    },
                    "max": {
                        "type": "string,float,Dimension",
                        "required": false
                    }
                }
            },
            "limit_location_z": {
                "action": "modify",
                "information": "Constraint the translation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,float,Dimension",
                        "required": false
                    },
                    "max": {
                        "type": "string,float,Dimension",
                        "required": false
                    }
                }
            },
            "limit_rotation_xyz": {
                "action": "modify",
                "information": "Constraint the rotation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "x": {
                        "type": "string,float,Angle",
                        "required": false
                    },
                    "y": {
                        "type": "string,float,Angle",
                        "required": false
                    },
                    "z": {
                        "type": "string,float,Angle",
                        "required": false
                    }
                }
            },
            "limit_rotation_x": {
                "action": "modify",
                "information": "Constraint the rotation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,float,Angle",
                        "required": false
                    },
                    "max": {
                        "type": "string,float,Angle",
                        "required": false
                    }
                }
            },
            "limit_rotation_y": {
                "action": "modify",
                "information": "Constraint the rotation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,float,Angle",
                        "required": false
                    },
                    "max": {
                        "type": "string,float,Angle",
                        "required": false
                    }
                }
            },
            "limit_rotation_z": {
                "action": "modify",
                "information": "Constraint the rotation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,float,Angle",
                        "required": false
                    },
                    "max": {
                        "type": "string,float,Angle",
                        "required": false
                    }
                }
            }
        },
        "Material": {
            "information": "Materials affect the appearance and simulation properties of the parts.",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "get_preset": {
                "information": "Get a material from a preset",
                "action": "get",
                "return_type": "Material",
                "is_static_method": true,
                "parameters": {
                    "material_name": {
                        "information": "A PresetMaterial name or instance",
                        "type": "PresetMaterial",
                        "required": true
                    }
                }
            },
            "assign_to_part": {
                "action": "modify",
                "information": "Assigns the material to a part.",
                "parameters": {
                    "part_name_or_instance": {
                        "type": "string,Part"
                    }
                }
            },
            "set_color": {
                "information": "Set the RGBA color of an entity. Supports 0-255 int or 0.0-1.0 float values.",
                "action": "modify",
                "parameters": {
                    "r_value": {
                        "type": "int,float"
                    },
                    "g_value": {
                        "type": "int,float"
                    },
                    "b_value": {
                        "type": "int,float"
                    },
                    "a_value": {
                        "type": "int,float",
                        "default_value": 1.0
                    }
                }
            },
            "set_reflectivity": {
                "information": "Change the surface reflectivity (metallic luster) of the material.",
                "action": "modify",
                "is_static_method": false,
                "parameters": {
                    "reflectivity": {
                        "information": "A float value between 0.0-1.0",
                        "type": "float",
                        "required": true
                    }
                }
            },
            "set_roughness": {
                "information": "Change the surface roughness of the material.",
                "action": "modify",
                "is_static_method": false,
                "parameters": {
                    "roughness": {
                        "information": "A float value between 0.0-1.0",
                        "type": "float",
                        "required": true
                    }
                }
            },
            "set_image_texture": {
                "information": "Add a texture from an image file.",
                "action": "modify",
                "parameters": {
                    "image_file_path": {
                        "type": "string"
                    }
                }
            }
        },
        "Animation": {
            "information": "Animation related functionality.",
            "constructor": {},
            "default": {
                "information": "Get an Animation instance for the current scene.",
                "action": "get",
                "is_static_method": true,
                "return_type": "Animation"
            },
            "set_frame_start": {
                "information": "Set the start animation frame in the scene.",
                "action": "modify",
                "parameters": {
                    "frame_number": {
                        "type": "int"
                    }
                }
            },
            "set_frame_end": {
                "information": "Set the end animation frame in the scene.",
                "action": "modify",
                "parameters": {
                    "frame_number": {
                        "type": "int"
                    }
                }
            },
            "set_frame_current": {
                "information": "Set the current animation frame in the scene.",
                "action": "modify",
                "parameters": {
                    "frame_number": {
                        "type": "int"
                    }
                }
            },
            "create_key_frame_location": {
                "information": "Create an animation key-frame using the location of the entity.",
                "action": "modify",
                "parameters": {
                    "entity": {
                        "type": "string,Entity"
                    },
                    "frame_number": {
                        "type": "int"
                    }
                }
            },
            "create_key_frame_rotation": {
                "information": "Create an animation key-frame using the rotation of the entity.",
                "action": "modify",
                "parameters": {
                    "entity": {
                        "type": "string,Entity"
                    },
                    "frame_number": {
                        "type": "int"
                    }
                }
            }
        },
        "Light": {
            "information": "Manipulate a light object.",
            "extends": "Entity",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "set_color": {
                "information": "Set the color of an existing light.",
                "action": "modify",
                "parameters": {
                    "r_value": {
                        "type": "int,float"
                    },
                    "g_value": {
                        "type": "int,float"
                    },
                    "b_value": {
                        "type": "int,float"
                    }
                }
            },
            "create_sun": {
                "information": "Create a Sun-type light.",
                "action": "create",
                "parameters": {
                    "energy_level": {
                        "type": "float"
                    }
                }
            },
            "create_spot": {
                "information": "Create a Spot-type light.",
                "action": "create",
                "parameters": {
                    "energy_level": {
                        "type": "float"
                    }
                }
            },
            "create_point": {
                "information": "Create a Point-type light.",
                "action": "create",
                "parameters": {
                    "energy_level": {
                        "type": "float"
                    }
                }
            },
            "create_area": {
                "information": "Create an Area-type light.",
                "action": "create",
                "parameters": {
                    "energy_level": {
                        "type": "float"
                    }
                }
            }
        },
        "Camera": {
            "information": "Manipulate a camera object.",
            "extends": "Entity",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "create_perspective": {
                "information": "Create a perspective camera in the scene.",
                "action": "create",
                "parameters": {}
            },
            "create_orthogonal": {
                "information": "Create an orthogonal camera in the scene.",
                "action": "create",
                "parameters": {}
            },
            "set_focal_length": {
                "information": "Set the focal length of the camera.",
                "action": "modify",
                "parameters": {
                    "length": {
                        "type": "float"
                    }
                }
            }
        },
        "Render": {
            "information": "Render the scene and export images or videos.",
            "render_image": {
                "information": "Render a still image.",
                "action": "interact",
                "parameters": {
                    "output_file_path": {
                        "type": "string",
                        "required": true
                    },
                    "overwrite": {
                        "type": "boolean",
                        "default_value": true
                    },
                    "file_type": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "render_video_mp4": {
                "information": "Render an MP4 video.",
                "action": "interact",
                "parameters": {
                    "output_file_path": {
                        "type": "string",
                        "required": true
                    },
                    "start_frame_number": {
                        "type": "int",
                        "default_value": 1
                    },
                    "end_frame_number": {
                        "type": "int",
                        "default_value": 100
                    },
                    "step_frames": {
                        "type": "int",
                        "default_value": 1
                    },
                    "overwrite": {
                        "type": "boolean",
                        "default_value": true
                    }
                }
            },
            "render_video_frames": {
                "information": "Render a video as image frame stills.",
                "action": "interact",
                "parameters": {
                    "output_folder_path": {
                        "type": "string",
                        "required": true
                    },
                    "file_name_prefix": {
                        "type": "string",
                        "required": true
                    },
                    "start_frame_number": {
                        "type": "int",
                        "default_value": 1
                    },
                    "end_frame_number": {
                        "type": "int",
                        "default_value": 100
                    },
                    "step_frames": {
                        "type": "int",
                        "default_value": 1
                    },
                    "overwrite": {
                        "type": "boolean",
                        "default_value": true
                    },
                    "file_type": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "set_frame_rate": {
                "information": "Set rendering framerate.",
                "action": "modify",
                "parameters": {
                    "frame_rate": {
                        "type": "int",
                        "required": true
                    }
                }
            },
            "set_resolution": {
                "information": "Set rendering resolution",
                "action": "modify",
                "parameters": {
                    "x": {
                        "type": "int",
                        "required": true
                    },
                    "y": {
                        "type": "int",
                        "required": true
                    }
                }
            },
            "set_render_quality": {
                "information": "Set rendering quality.",
                "action": "modify",
                "parameters": {
                    "quality": {
                        "information": "A value between 0 and 100",
                        "type": "int",
                        "required": true
                    }
                }
            },
            "set_render_engine": {
                "information": "Set rendering engine name.",
                "action": "modify",
                "parameters": {
                    "name": {
                        "type": "string",
                        "required": true
                    }
                }
            },
            "set_camera": {
                "information": "Set the rendering camera.",
                "action": "modify",
                "parameters": {
                    "camera_name_or_instance": {
                        "information": "The camera name or Camera class instance.",
                        "type": "string,Camera"
                    }
                }
            }
        },
        "Scene": {
            "information": "Scene, camera, lighting, rendering, animation, simulation and GUI related functionality.",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string",
                        "required": false
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "default": {
                "information": "Get a Scene instance for the current scene.",
                "action": "get",
                "is_static_method": true,
                "return_type": "Scene"
            },
            "create": {
                "information": "Creates a new scene.",
                "action": "create"
            },
            "delete": {
                "information": "Deletes a scene.",
                "action": "delete"
            },
            "is_exists": {
                "action": "get",
                "information": "Check if the scene exists",
                "return_type": "boolean"
            },
            "get_selected_entity": {
                "information": "Get the selected entity in the Scene.",
                "action": "get",
                "return_type": "Entity"
            },
            "export": {
                "action": "interact",
                "information": "Export the entire scene or specific entities.",
                "parameters": {
                    "file_path": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "list[string,Exportable]"
                    },
                    "overwrite": {
                        "type": "boolean",
                        "default_value": true
                    },
                    "scale": {
                        "type": "float",
                        "default_value": 1.0
                    }
                }
            },
            "set_default_unit": {
                "action": "modify",
                "information": "Set the document's default measurements system.",
                "parameters": {
                    "unit": {
                        "type": "string,LengthUnit"
                    }
                }
            },
            "create_group": {
                "action": "create",
                "information": "Create a new group",
                "parameters": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "delete_group": {
                "action": "delete",
                "information": "Delete a new group",
                "parameters": {
                    "name": {
                        "type": "string"
                    },
                    "remove_children": {
                        "type": "boolean"
                    }
                }
            },
            "remove_from_group": {
                "action": "delete",
                "information": "Removes an existing entity from a group",
                "parameters": {
                    "entity_name": {
                        "type": "string"
                    },
                    "group_name": {
                        "type": "string"
                    }
                }
            },
            "assign_to_group": {
                "action": "modify",
                "information": "Assigns an existing entity to a new group",
                "parameters": {
                    "entities": {
                        "type": "list[string,Entity]"
                    },
                    "group_name": {
                        "type": "string"
                    },
                    "remove_from_other_groups": {
                        "type": "boolean",
                        "required": false,
                        "default_value": true
                    }
                }
            },
            "set_visible": {
                "action": "modify",
                "information": "Change the visibiltiy of the entity.",
                "parameters": {
                    "entities": {
                        "type": "list[string,Entity]"
                    },
                    "is_visible": {
                        "type": "boolean"
                    }
                }
            },
            "set_background_image": {
                "action": "modify",
                "information": "Set the scene background image. This can be an image or an HDRI texture.",
                "parameters": {
                    "file_path": {
                        "type": "string"
                    },
                    "location_x": {
                        "type": "string,float,Dimension",
                        "required": false,
                        "default_value": 0
                    },
                    "location_y": {
                        "type": "string,float,Dimension",
                        "required": false,
                        "default_value": 0
                    }
                }
            }
        },
        "Analytics": {
            "information": "Tools for collecting data about the entities and scene.",
            "constructor": {},
            "measure_distance": {
                "action": "get",
                "return_type": "Dimensions",
                "information": "The ubiquitous ruler.",
                "parameters": {
                    "entity1": {
                        "type": "string,Entity"
                    },
                    "entity2": {
                        "type": "string,Entity"
                    }
                }
            },
            "measure_angle": {
                "action": "get",
                "return_type": "list[Angle]",
                "information": "The ubiquitous ruler.",
                "parameters": {
                    "entity1": {
                        "type": "string,Entity"
                    },
                    "entity2": {
                        "type": "string,Entity"
                    },
                    "pivot": {
                        "type": "string,Entity",
                        "required": false
                    }
                }
            },
            "get_world_pose": {
                "action": "get",
                "return_type": "list[float]",
                "information": "Returns the world pose of an entity.",
                "parameters": {
                    "entity": {
                        "type": "string,Entity"
                    }
                }
            },
            "get_bounding_box": {
                "action": "get",
                "return_type": "BoundaryBox",
                "information": "Returns the bounding box of an entity.",
                "parameters": {
                    "entity_name": {
                        "type": "string,Entity"
                    }
                }
            },
            "get_dimensions": {
                "action": "get",
                "return_type": "Dimensions",
                "information": "Returns the dimensions of an entity.",
                "parameters": {
                    "entity_name": {
                        "type": "string,Entity"
                    }
                }
            },
            "log": {
                "action": "modify",
                "information": "Write a message",
                "parameters": {
                    "message": {
                        "type": "string"
                    }
                }
            }
        }
    }
}