# THIS IS AN AUTO-GENERATE FILE. 
# DO NOT EDIT MANUALLY.
# Please run capabilitiesToPyInterface.sh to generate this file.

from abc import ABCMeta, abstractmethod
from typing import Optional, TypeAlias, Union

from core.utilities import (Angle, Axis, BoundaryBox, CurveTypes, Dimension,
                            Dimensions, LengthUnit, Point)

FloatOrItsStringValue: TypeAlias = Union[str, float]
IntOrFloat: TypeAlias = Union[int, float]
MaterialOrItsName: TypeAlias = Union[str, 'Material']
PartOrItsName: TypeAlias = Union[str, 'Part']
EntityOrItsName: TypeAlias = Union[str, 'Entity']
LandmarkOrItsName: TypeAlias = Union[str, 'Landmark']
AxisOrItsIndexOrItsName: TypeAlias = Union[str, int, Axis]
DimensionOrItsFloatOrStringValue: TypeAlias = Union[str,float, Dimension]
AngleOrItsFloatOrStringValue: TypeAlias = Union[str,float, Angle]
EntityOrItsNameOrLandmark: TypeAlias = Union[str, 'Entity', 'Landmark']
PointOrListOfFloatOrItsStringValue: TypeAlias = Union[str, list[FloatOrItsStringValue], Point]
LengthUnitOrItsName: TypeAlias = Union[str,LengthUnit]

{%-set useAbstractMethodDecorator = True%}

{% for className, methods in capabilities.items() -%}

class {{className}}({{ methods["extends"]+"," if "extends" in methods}}metaclass=ABCMeta): {# e.g. Part #}
    {% include 'capabilitiesToPyClassDefinition.j2' %}
{% endfor -%}