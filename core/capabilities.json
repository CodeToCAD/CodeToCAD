{
    "version": "0.0.1",
    "information": "Capabilities for CodeToCAD.",
    "capabilities": {
        "Entity": {
            "information": "Capabilities shared between Parts, Sketches and Landmarks.",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "isExists": {
                "action": "get",
                "information": "Check if an entity exists",
                "returnType": "boolean"
            },
            "rename": {
                "action": "modify",
                "information": "Rename the entity, with an option to rename linked landmarks and underlying data.",
                "parameters": {
                    "newName": {
                        "type": "string"
                    },
                    "renamelinkedEntitiesAndLandmarks": {
                        "type": "boolean",
                        "defaultValue": true
                    }
                }
            },
            "delete": {
                "action": "delete",
                "information": "Delete the entity from the scene. You may need to delete an associated joint or other features.",
                "parameters": {
                    "removeChildren": {
                        "type": "boolean"
                    }
                }
            },
            "isVisible": {
                "action": "get",
                "information": "Returns whether the entity is visible in the scene.",
                "returnType": "boolean"
            },
            "setVisible": {
                "action": "interact",
                "information": "Toggles visibility of an entity in the scene.",
                "parameters": {
                    "isVisible": {
                        "type": "boolean"
                    }
                }
            },
            "apply": {
                "action": "modify",
                "information": "Apply any modifications. This is application specific, but a general function is that it finalizes any changes made to an entity.",
                "parameters": {}
            },
            "getNativeInstance": {
                "action": "get",
                "information": "Get the native API's object instance. For example, in Blender API, this would return a bpy.object instance.",
                "parameters": {}
            },
            "getLocationWorld": {
                "action": "get",
                "returnType": "Point",
                "information": "Get the entities XYZ location relative to World Space.",
                "parameters": {}
            },
            "getLocationLocal": {
                "action": "get",
                "returnType": "Point",
                "information": "Get the entities XYZ location relative to Local Space.",
                "parameters": {}
            },
            "select": {
                "action": "interact",
                "information": "Select the entity (in UI). If a landmark is specified, select the closest vertex or edge or face to a landmark.",
                "parameters": {
                    "landmarkName": {
                        "required": false,
                        "type": "string,Landmark"
                    },
                    "selectionType": {
                        "type": "string",
                        "defaultValue": "vertex"
                    }
                }
            },
            "export": {
                "action": "interact",
                "information": "Export Entity. Use the filePath to control the export type, e.g. '/path/to/cube.obj' or '/path/to/curve.svg'",
                "parameters": {
                    "filePath": {
                        "type": "string"
                    },
                    "overwrite": {
                        "type": "boolean",
                        "defaultValue": true
                    },
                    "scale": {
                        "type": "float",
                        "defaultValue": 1.0
                    }
                }
            },
            "clone": {
                "action": "create",
                "information": "Clone an existing entity with its geometry and properties.",
                "parameters": {
                    "newName": {
                        "type": "string"
                    },
                    "copyLandmarks": {
                        "type": "boolean",
                        "defaultValue": true
                    }
                }
            },
            "mirror": {
                "action": "create",
                "information": "Mirror an existing entity with respect to a landmark. If a name is provided, the mirror becomes a separate entity.",
                "parameters": {
                    "mirrorAcrossEntity": {
                        "type": "string,Entity"
                    },
                    "axis": {
                        "type": "string,int,Axis"
                    },
                    "resultingMirroredEntityName": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "linearPattern": {
                "action": "modify",
                "information": "Pattern in a uniform direction.",
                "parameters": {
                    "instanceCount": {
                        "type": "int"
                    },
                    "offset": {
                        "type": "string,float,Dimension"
                    },
                    "directionAxis": {
                        "type": "string,int,Axis",
                        "defaultValue": "z"
                    }
                }
            },
            "circularPattern": {
                "action": "modify",
                "information": "Pattern in a circular direction.",
                "parameters": {
                    "instanceCount": {
                        "type": "int"
                    },
                    "separationAngle": {
                        "type": "string,float,Angle"
                    },
                    "centerEntityOrLandmark": {
                        "type": "string,Entity,Landmark"
                    },
                    "normalDirectionAxis": {
                        "type": "string,int,Axis",
                        "defaultValue": "z"
                    }
                }
            },
            "translateX": {
                "action": "modify",
                "information": "Translate in the X direction. Pass a number or Dimension or Dimension-String (e.g. '2cm') to translate to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "translateY": {
                "action": "modify",
                "information": "Translate in the Y direction. Pass a number or Dimension or Dimension-String (e.g. '2cm') to translate to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "translateZ": {
                "action": "modify",
                "information": "Translate in the z direction. Pass a number or Dimension or Dimension-String (e.g. '2cm') to translate to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "scaleX": {
                "action": "modify",
                "information": "Scale in the X direction. Pass a number to scale by a factor. Pass a Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "scaleY": {
                "action": "modify",
                "information": "Scale in the Y direction. Pass a number to scale by a factor. Pass a Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "scaleZ": {
                "action": "modify",
                "information": "Scale in the Z direction. Pass a number to scale by a factor. Pass a Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "scaleKeepAspectRatio": {
                "action": "modify",
                "information": "Scale in one axis and maintain the others. Pass a Dimension or Dimension-String (e.g. '2cm') to scale to a specific length.",
                "parameters": {
                    "scale": {
                        "type": "string,float,Dimension"
                    },
                    "axis": {
                        "type": "string,int,Axis"
                    }
                }
            },
            "rotateX": {
                "action": "modify",
                "information": "Rotate in the X direction. Default units is degrees. Pass in a number, Angle or Angle-String (e.g. '1/4radians' or '1/4r' or '90d'",
                "parameters": {
                    "rotation": {
                        "type": "string,float,Angle"
                    }
                }
            },
            "rotateY": {
                "action": "modify",
                "information": "Rotate in the Y direction. Default units is degrees. Pass in a number, Angle or Angle-String (e.g. '1/4radians' or '1/4r' or '90d'",
                "parameters": {
                    "rotation": {
                        "type": "string,float,Angle"
                    }
                }
            },
            "rotateZ": {
                "action": "modify",
                "information": "Rotate in the Z direction. Default units is degrees. Pass in a number, Angle or Angle-String (e.g. '1/4radians' or '1/4r' or '90d'",
                "parameters": {
                    "rotation": {
                        "type": "string,float,Angle"
                    }
                }
            },
            "twist": {
                "action": "modify",
                "information": "AKA Helix, Screw. Revolve an entity",
                "parameters": {
                    "angle": {
                        "type": "string,float,Angle"
                    },
                    "screwPitch": {
                        "type": "string,float,Dimension"
                    },
                    "interations": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "axis": {
                        "type": "string,int,Axis",
                        "defaultValue": "z"
                    }
                }
            },
            "remesh": {
                "action": "modify",
                "information": "Remeshing should be capable of voxel or vertex based reconstruction, including decimating unnecessary vertices (if applicable).",
                "parameters": {
                    "strategy": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "float"
                    }
                }
            },
            "createLandmark": {
                "action": "modify",
                "information": "Shortcut for creating and assigning a landmark to this entity.",
                "parameters": {
                    "landmarkName": {
                        "type": "string"
                    },
                    "x": {
                        "type": "string,float,Dimension"
                    },
                    "y": {
                        "type": "string,float,Dimension"
                    },
                    "z": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "getBoundingBox": {
                "action": "get",
                "returnType": "BoundaryBox",
                "information": "Get the Boundary Box around the entity.",
                "parameters": {}
            },
            "getDimensions": {
                "action": "get",
                "returnType": "Dimensions",
                "information": "Get the length span in each coordinate axis (X,Y,Z).",
                "parameters": {}
            },
            "getLandmark": {
                "action": "get",
                "returnType": "Landmark",
                "information": "Get the landmark by name",
                "parameters": {
                    "landmarkName": {
                        "type": "string"
                    }
                }
            }
        },
        "Part": {
            "information": "Create and manipulate 3D shapes.",
            "alias": [
                "Shape",
                "Mesh"
            ],
            "extends": "Entity",
            "createFromFile": {
                "action": "create",
                "information": "Adds geometry to a part from a file. If the part does not exist, this will create it.",
                "parameters": {
                    "filePath": {
                        "type": "string"
                    },
                    "fileType": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "createPrimitive": {
                "action": "create",
                "information": "Adds geometry to a part from a primitive named primitive shape.",
                "parameters": {
                    "primitiveName": {
                        "type": "string"
                    },
                    "dimensions": {
                        "type": "string"
                    },
                    "keywordArguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "createCube": {
                "action": "create",
                "information": "Adds cuboid geometry to a part.",
                "parameters": {
                    "width": {
                        "type": "string,float,Dimension"
                    },
                    "length": {
                        "type": "string,float,Dimension"
                    },
                    "height": {
                        "type": "string,float,Dimension"
                    },
                    "keywordArguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "createCone": {
                "action": "create",
                "information": "Adds cone geometry to a part.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "height": {
                        "type": "string,float,Dimension"
                    },
                    "draftRadius": {
                        "type": "string,float,Dimension",
                        "defaultValue": 0
                    },
                    "keywordArguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "createCylinder": {
                "action": "create",
                "information": "Adds cylinder geometry to a part.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "height": {
                        "type": "string,float,Dimension"
                    },
                    "keywordArguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "createTorus": {
                "action": "create",
                "information": "Adds torus geometry to a part.",
                "parameters": {
                    "innerRadius": {
                        "type": "string,float,Dimension"
                    },
                    "outerRadius": {
                        "type": "string,float,Dimension"
                    },
                    "keywordArguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "createSphere": {
                "action": "create",
                "information": "Adds sphere geometry to a part.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "keywordArguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "createGear": {
                "action": "create",
                "information": "Adds gear geometry to a part.",
                "parameters": {
                    "outerRadius": {
                        "type": "string,float,Dimension"
                    },
                    "addendum": {
                        "type": "string,float,Dimension"
                    },
                    "innerRadius": {
                        "type": "string,float,Dimension"
                    },
                    "dedendum": {
                        "type": "string,float,Dimension"
                    },
                    "height": {
                        "type": "string,float,Dimension"
                    },
                    "pressureAngle": {
                        "type": "string,float,Angle",
                        "defaultValue": "20d"
                    },
                    "numberOfTeeth": {
                        "type": "int",
                        "defaultValue": 12
                    },
                    "skewAngle": {
                        "type": "string,float,Angle",
                        "defaultValue": 0
                    },
                    "conicalAngle": {
                        "type": "string,float,Angle",
                        "defaultValue": 0
                    },
                    "crownAngle": {
                        "type": "string,float,Angle",
                        "defaultValue": 0
                    },
                    "keywordArguments": {
                        "type": "object",
                        "required": false,
                        "information": "key-value pairs to pass onto the native api"
                    }
                }
            },
            "loft": {
                "action": "create",
                "information": "Interpolate between two existing parts.",
                "parameters": {
                    "Landmark1": {
                        "type": "Landmark"
                    },
                    "Landmark2": {
                        "type": "Landmark"
                    }
                }
            },
            "union": {
                "action": "modify",
                "information": "Boolean union",
                "parameters": {
                    "withPart": {
                        "type": "string,Part"
                    },
                    "deleteAfterUnion": {
                        "type": "boolean",
                        "defaultValue": true
                    },
                    "isTransferLandmarks": {
                        "type": "boolean",
                        "defaultValue": false
                    }
                }
            },
            "subtract": {
                "action": "modify",
                "information": "Boolean subtraction",
                "parameters": {
                    "withPart": {
                        "type": "string,Part"
                    },
                    "deleteAfterUnion": {
                        "type": "boolean",
                        "defaultValue": true
                    },
                    "isTransferLandmarks": {
                        "type": "boolean",
                        "defaultValue": false
                    }
                }
            },
            "intersect": {
                "action": "modify",
                "information": "Boolean intersection",
                "parameters": {
                    "withPart": {
                        "type": "string,Part"
                    },
                    "deleteAfterUnion": {
                        "type": "boolean",
                        "defaultValue": true
                    },
                    "isTransferLandmarks": {
                        "type": "boolean",
                        "defaultValue": false
                    }
                }
            },
            "hollow": {
                "action": "modify",
                "information": "Remove vertices, if necessary, until the part has a specified wall thickness.",
                "parameters": {
                    "thicknessX": {
                        "type": "string,float,Dimension"
                    },
                    "thicknessY": {
                        "type": "string,float,Dimension"
                    },
                    "thicknessZ": {
                        "type": "string,float,Dimension"
                    },
                    "startAxis": {
                        "type": "string,int,Axis",
                        "defaultValue": "z"
                    },
                    "flipAxis": {
                        "type": "boolean",
                        "defaultValue": false
                    }
                }
            },
            "hole": {
                "action": "modify",
                "information": "Create a hole.",
                "parameters": {
                    "holeLandmark": {
                        "type": "string,Landmark"
                    },
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "depth": {
                        "type": "string,float,Dimension"
                    },
                    "normalAxis": {
                        "type": "string,int,Axis",
                        "defaultValue": "z"
                    },
                    "flip": {
                        "type": "boolean",
                        "defaultValue": false
                    },
                    "instanceCount": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "instanceSeparation": {
                        "type": "string,float,Dimension",
                        "defaultValue": 0.0
                    },
                    "aboutEntityOrLandmark": {
                        "type": "string,Entity,Landmark",
                        "required": false
                    },
                    "mirror": {
                        "type": "boolean",
                        "defaultValue": false
                    },
                    "instanceAxis": {
                        "type": "string,int,Axis",
                        "required": false
                    },
                    "initialRotationX": {
                        "type": "string,float,Angle",
                        "defaultValue": 0.0
                    },
                    "initialRotationY": {
                        "type": "string,float,Angle",
                        "defaultValue": 0.0
                    },
                    "initialRotationZ": {
                        "type": "string,float,Angle",
                        "defaultValue": 0.0
                    },
                    "leaveHoleEntity": {
                        "type": "boolean",
                        "defaultValue": false
                    }
                }
            },
            "assignMaterial": {
                "action": "modify",
                "information": "Assign a known material to this part.",
                "parameters": {
                    "materialName": {
                        "type": "string,Material"
                    }
                }
            },
            "isCollidingWithPart": {
                "action": "get",
                "information": "Check if this part is colliding with another.",
                "parameters": {
                    "otherPart": {
                        "type": "string,Part"
                    }
                }
            },
            "filletAllEdges": {
                "action": "modify",
                "information": "Fillet all edges.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "useWidth": {
                        "type": "boolean",
                        "defaultValue": false
                    }
                }
            },
            "filletEdges": {
                "action": "modify",
                "information": "Fillet specific edges.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "landmarksNearEdges": {
                        "type": "list[string,Landmark]"
                    },
                    "useWidth": {
                        "type": "boolean",
                        "defaultValue": false
                    }
                }
            },
            "filletFaces": {
                "action": "modify",
                "information": "Fillet specific faces.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "landmarksNearFaces": {
                        "type": "list[string,Landmark]"
                    },
                    "useWidth": {
                        "type": "boolean",
                        "defaultValue": false
                    }
                }
            },
            "chamferAllEdges": {
                "action": "modify",
                "information": "Chamfer all edges.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    }
                }
            },
            "chamferEdges": {
                "action": "modify",
                "information": "Chamfer specific edges.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "landmarksNearEdges": {
                        "type": "list[string,Landmark]"
                    }
                }
            },
            "chamferFaces": {
                "action": "modify",
                "information": "Chamfer specific faces.",
                "parameters": {
                    "radius": {
                        "type": "string,float,Dimension"
                    },
                    "landmarksNearFaces": {
                        "type": "list[string,Landmark]"
                    }
                }
            }
        },
        "Sketch": {
            "information": "Capabilities related to adding, multiplying, and/or modifying a curve.",
            "alias": [
                "Curve"
            ],
            "extends": "Entity",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string"
                    },
                    "curveType": {
                        "type": "CurveTypes",
                        "required": false
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "revolve": {
                "action": "modify",
                "information": "Revolve a Sketch around another Entity or Landmark",
                "parameters": {
                    "angle": {
                        "type": "string,float,Angle"
                    },
                    "aboutEntityOrLandmark": {
                        "type": "string,Entity,Landmark"
                    },
                    "axis": {
                        "type": "string,int,Axis",
                        "defaultValue": "z"
                    }
                }
            },
            "extrude": {
                "action": "modify",
                "information": "Extrude a curve by a specified length.",
                "parameters": {
                    "length": {
                        "type": "string,float,Dimension"
                    },
                    "convertToMesh": {
                        "type": "boolean",
                        "defaultValue": true
                    }
                }
            },
            "sweep": {
                "action": "modify",
                "information": "Extrude this  curve along the path of another",
                "parameters": {
                    "profileCurveName": {
                        "type": "string"
                    },
                    "fillCap": {
                        "type": "boolean",
                        "defaultValue": false
                    }
                }
            },
            "createText": {
                "action": "create",
                "information": "Adds text to a sketch.",
                "parameters": {
                    "text": {
                        "type": "string"
                    },
                    "fontSize": {
                        "type": "string,float,Dimension",
                        "defaultValue": 1.0
                    },
                    "bold": {
                        "type": "boolean",
                        "defaultValue": false
                    },
                    "italic": {
                        "type": "boolean",
                        "defaultValue": false
                    },
                    "underlined": {
                        "type": "boolean",
                        "defaultValue": false
                    },
                    "characterSpacing": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "wordSpacing": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "lineSpacing": {
                        "type": "int",
                        "defaultValue": 1
                    },
                    "fontFilePath": {
                        "type": "string",
                        "defaultValue": null,
                        "required": false
                    }
                }
            },
            "createFromVertices": {
                "action": "create",
                "information": "Create a curve from 2D/3D points.",
                "parameters": {
                    "coordinates": {
                        "type": "list[string,list[string],Point]"
                    },
                    "interpolation": {
                        "type": "int",
                        "defaultValue": 64
                    }
                }
            },
            "createPoint": {
                "action": "create",
                "information": "Create a point",
                "parameters": {
                    "coordinate": {
                        "type": "string,list[string],Point"
                    }
                }
            },
            "createLine": {
                "action": "create",
                "information": "Create a line",
                "parameters": {
                    "length": {
                        "type": "string,float,Dimension"
                    },
                    "angleX": {
                        "type": "string,float,Angle",
                        "defaultValue": 0.0
                    },
                    "angleY": {
                        "type": "string,float,Angle",
                        "defaultValue": 0.0
                    },
                    "symmetric": {
                        "type": "boolean",
                        "defaultValue": false
                    }
                }
            },
            "createLineBetweenPoints": {
                "action": "create",
                "information": "Create a line between two points",
                "parameters": {
                    "endAt": {
                        "type": "string,list[string],Point"
                    },
                    "startAt": {
                        "type": "string,list[string],Point",
                        "required": false,
                        "defaultValue": null
                    }
                }
            },
            "createCircle": {
                "action": "create",
                "information": "Create a circle",
                "parameters": {
                    "radius": {
                        "type": "Dimension"
                    }
                }
            },
            "createEllipse": {
                "action": "create",
                "information": "Create an ellipse",
                "parameters": {
                    "radiusA": {
                        "type": "Dimension"
                    },
                    "radiusB": {
                        "type": "Dimension"
                    }
                }
            },
            "createArc": {
                "action": "create",
                "information": "Create an arc",
                "parameters": {
                    "radius": {
                        "type": "Dimension"
                    },
                    "angle": {
                        "type": "string,float,Angle",
                        "defaultValue": "180d"
                    }
                }
            },
            "createArcBetweenThreePoints": {
                "action": "create",
                "information": "Create a 3-point arc",
                "parameters": {
                    "pointA": {
                        "type": "Point"
                    },
                    "pointB": {
                        "type": "Point"
                    },
                    "centerPoint": {
                        "type": "Point"
                    }
                }
            },
            "createSegment": {
                "action": "create",
                "information": "Create a segment (intersection of two circles)",
                "parameters": {
                    "innerRadius": {
                        "type": "Dimension"
                    },
                    "outerRadius": {
                        "type": "Dimension"
                    },
                    "angle": {
                        "type": "string,float,Angle",
                        "defaultValue": "180d"
                    }
                }
            },
            "createRectangle": {
                "action": "create",
                "information": "Create a rectangle",
                "parameters": {
                    "length": {
                        "type": "Dimension"
                    },
                    "width": {
                        "type": "Dimension"
                    }
                }
            },
            "createPolygon": {
                "action": "create",
                "information": "Create an n-gon",
                "parameters": {
                    "numberOfSides": {
                        "type": "int"
                    },
                    "length": {
                        "type": "Dimension"
                    },
                    "width": {
                        "type": "Dimension"
                    }
                }
            },
            "createTrapezoid": {
                "action": "create",
                "information": "Create a trapezoid",
                "parameters": {
                    "lengthUpper": {
                        "type": "Dimension"
                    },
                    "lengthLower": {
                        "type": "Dimension"
                    },
                    "height": {
                        "type": "Dimension"
                    }
                }
            }
        },
        "Landmark": {
            "information": "Landmarks are named positions on an entity.",
            "extends": "Entity",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string",
                        "required": true
                    },
                    "parentEntity": {
                        "type": "string,Entity",
                        "required": true
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "getLandmarkEntityName": {
                "action": "get",
                "returnType": "string"
            }
        },
        "Joint": {
            "information": "Joints define the relationships and constraints between entities.",
            "constructor": {
                "parameters": {
                    "entity1": {
                        "type": "string,Entity,Landmark"
                    },
                    "entity2": {
                        "type": "string,Entity,Landmark"
                    }
                }
            },
            "translateLandmarkOntoAnother": {
                "action": "modify",
                "information": "Transforms one landmark onto another",
                "parameters": {}
            },
            "pivot": {
                "action": "modify",
                "information": "Constraint the rotation origin of entity B to entity A's landmark.",
                "parameters": {}
            },
            "gearRatio": {
                "action": "modify",
                "information": "Constraint the rotation of entity B to be a percentage of entity A's",
                "parameters": {
                    "ratio": {
                        "type": "float"
                    }
                }
            },
            "limitXLocation": {
                "action": "modify",
                "information": "Constraint the translation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,list[string],Point",
                        "required": false
                    },
                    "max": {
                        "type": "string,list[string],Point",
                        "required": false
                    }
                }
            },
            "limitYLocation": {
                "action": "modify",
                "information": "Constraint the translation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,list[string],Point",
                        "required": false
                    },
                    "max": {
                        "type": "string,list[string],Point",
                        "required": false
                    }
                }
            },
            "limitZLocation": {
                "action": "modify",
                "information": "Constraint the translation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,list[string],Point",
                        "required": false
                    },
                    "max": {
                        "type": "string,list[string],Point",
                        "required": false
                    }
                }
            },
            "limitXRotation": {
                "action": "modify",
                "information": "Constraint the rotation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,float,Angle",
                        "required": false
                    },
                    "max": {
                        "type": "string,float,Angle",
                        "required": false
                    }
                }
            },
            "limitYRotation": {
                "action": "modify",
                "information": "Constraint the rotation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,float,Angle",
                        "required": false
                    },
                    "max": {
                        "type": "string,float,Angle",
                        "required": false
                    }
                }
            },
            "limitZRotation": {
                "action": "modify",
                "information": "Constraint the rotation of entity B, relative to entity A's landmark.",
                "parameters": {
                    "min": {
                        "type": "string,float,Angle",
                        "required": false
                    },
                    "max": {
                        "type": "string,float,Angle",
                        "required": false
                    }
                }
            }
        },
        "Material": {
            "information": "Materials affect the appearance and simulation properties of the parts.",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "assignToPart": {
                "action": "modify",
                "parameters": {
                    "partName": {
                        "type": "string,Part"
                    }
                }
            },
            "setColor": {
                "action": "modify",
                "parameters": {
                    "rValue": {
                        "type": "int,float"
                    },
                    "gValue": {
                        "type": "int,float"
                    },
                    "bValue": {
                        "type": "int,float"
                    },
                    "aValue": {
                        "type": "int,float",
                        "defaultValue": 1.0
                    }
                }
            },
            "addImageTexture": {
                "action": "modify",
                "parameters": {
                    "imageFilePath": {
                        "type": "string"
                    }
                }
            }
        },
        "Animation": {
            "information": "Camera, lighting, rendering, animation related functionality.",
            "constructor": {},
            "default": {
                "action": "get",
                "staticMethod": true,
                "returnType": "Animation"
            },
            "createKeyFrameLocation": {
                "parameters": {
                    "entity": {
                        "type": "string,Entity"
                    },
                    "frameNumber": {
                        "type": "int"
                    }
                }
            },
            "createKeyFrameRotation": {
                "parameters": {
                    "entity": {
                        "type": "string,Entity"
                    },
                    "frameNumber": {
                        "type": "int"
                    }
                }
            }
        },
        "Scene": {
            "information": "Scene, camera, lighting, rendering, animation, simulation and GUI related functionality.",
            "constructor": {
                "parameters": {
                    "name": {
                        "type": "string",
                        "required": false
                    },
                    "description": {
                        "type": "string",
                        "required": false
                    }
                }
            },
            "default": {
                "action": "get",
                "staticMethod": true,
                "returnType": "Scene"
            },
            "create": {
                "information": "Creates a new scene",
                "action": "create"
            },
            "delete": {
                "information": "Deletes a scene",
                "action": "delete"
            },
            "export": {
                "action": "interact",
                "information": "Export the entire scene or specific entities.",
                "parameters": {
                    "filePath": {
                        "type": "string"
                    },
                    "entities": {
                        "type": "list[string,Entity]"
                    },
                    "overwrite": {
                        "type": "boolean",
                        "defaultValue": true
                    },
                    "scale": {
                        "type": "float",
                        "defaultValue": 1.0
                    }
                }
            },
            "setDefaultUnit": {
                "action": "update",
                "information": "Set the document's default measurements system.",
                "parameters": {
                    "unit": {
                        "type": "string,LengthUnit"
                    }
                }
            },
            "createGroup": {
                "action": "create",
                "information": "Create a new group",
                "parameters": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "deleteGroup": {
                "action": "delete",
                "information": "Delete a new group",
                "parameters": {
                    "name": {
                        "type": "string"
                    },
                    "removeChildren": {
                        "type": "boolean"
                    }
                }
            },
            "removeFromGroup": {
                "action": "delete",
                "information": "Removes an existing entity from a group",
                "parameters": {
                    "entityName": {
                        "type": "string"
                    },
                    "groupName": {
                        "type": "string"
                    }
                }
            },
            "assignToGroup": {
                "action": "update",
                "information": "Assigns an existing entity to a new group",
                "parameters": {
                    "entities": {
                        "type": "list[string,Entity]"
                    },
                    "groupName": {
                        "type": "string"
                    },
                    "removeFromOtherGroups": {
                        "type": "boolean",
                        "required": false,
                        "defaultValue": true
                    }
                }
            },
            "setVisible": {
                "action": "update",
                "information": "Change the visibiltiy of the entity.",
                "parameters": {
                    "entities": {
                        "type": "list[string,Entity]"
                    },
                    "isVisible": {
                        "type": "boolean"
                    }
                }
            }
        },
        "Analytics": {
            "information": "Tools for collecting data about the entities and scene.",
            "constructor": {},
            "measureDistance": {
                "action": "get",
                "returnType": "Dimensions",
                "information": "The ubiquitous ruler.",
                "parameters": {
                    "entity1": {
                        "type": "string,Entity,Landmark"
                    },
                    "entity2": {
                        "type": "string,Entity,Landmark"
                    }
                }
            },
            "measureAngle": {
                "action": "get",
                "returnType": "list[Angle]",
                "information": "The ubiquitous ruler.",
                "parameters": {
                    "entity1": {
                        "type": "string,Entity,Landmark"
                    },
                    "entity2": {
                        "type": "string,Entity,Landmark"
                    },
                    "pivot": {
                        "type": "string,Entity,Landmark",
                        "required": false
                    }
                }
            },
            "getWorldPose": {
                "action": "get",
                "returnType": "list[float]",
                "information": "Returns the world pose of an entity.",
                "parameters": {
                    "entity": {
                        "type": "string,Entity"
                    }
                }
            },
            "getBoundingBox": {
                "action": "get",
                "returnType": "BoundaryBox",
                "information": "Returns the bounding box of an entity.",
                "parameters": {
                    "entityName": {
                        "type": "string,Entity"
                    }
                }
            },
            "getDimensions": {
                "action": "get",
                "returnType": "Dimensions",
                "information": "Returns the dimensions of an entity.",
                "parameters": {
                    "entityName": {
                        "type": "string,Entity"
                    }
                }
            }
        }
    }
}