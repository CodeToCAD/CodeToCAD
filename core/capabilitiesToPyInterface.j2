{#

Nesting is formatted like this:
    className > methods > properties > parameters/information > definitions

Sample context:
    "Part": => className
        "information": => a method
            "Capabilities related to...",
        "constructor": { => a method
            "parameters": => a property
                {"name": => a parameter
                    {"type": "string"} => a definition
                },
        },
        "fromFile": { => a method
            "information": => a property
                "Create a shape from a file.",
            "parameters": => a property
                {"filePath": => a parameter
                    {"type": "string"}, => a definition
                "fileType": => a parameter
                    {"type": "string", "required": false} => a definition
                }
        }

-#}
from abc import ABCMeta, abstractmethod

from core.utilities import Point, Dimension, CurveTypes, Angle


{% set types = {"string":"str", "array": "list", "object": "dict", "number":"int", "float":"float", "boolean":"bool"} -%}
{% macro typeMapping(typeName) -%}
    {{types[typeName] if typeName in types else typeName}}
{%- endmacro %}
{%- for className, methods in capabilities.items() -%}

class {{className}}(metaclass=ABCMeta): {# e.g. Part #}

    {%-for method, properties in methods.items() -%} {# e.g. "parameters": {"name": {"type": "string"}} #}

    {%- set parameters = properties["parameters"] if "parameters" in properties else {} -%}

    {%- if method == "information" %}
    # {{ information }}

    {%- elif method == "alias"-%}
    
    {%- set alias = properties -%}

    {%- elif method == "constructor"-%}
    
    {# Do nothing #}

    {%- else %}

    @abstractmethod
    def {{method}}(self
    {%- if parameters.keys()|length > 0 -%}
    ,
    {%-for parameter, definition in parameters.items() -%} {# e.g. {"name":{"type": "string"}} #}
    {{ parameter }} {{-":" + typeMapping(definition.type) if definition.type and definition.type != "any" }} {{- "=None" if definition and definition.required == false -}} {{-", " if not loop.last}} \
    {%-endfor%}
    {%-endif%}
    ):
        raise NotImplementedError
    
    {%-endif-%}

    {%-endfor%}

{% endfor -%}